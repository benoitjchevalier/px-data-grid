{
  "schema_version": "1.0.0",
  "namespaces": [
    {
      "name": "Predix",
      "description": "",
      "summary": "",
      "sourceRange": {
        "file": "px-data-grid.html",
        "start": {
<<<<<<< HEAD
          "line": 1760,
          "column": 6
        },
        "end": {
          "line": 1760,
=======
          "line": 1831,
          "column": 6
        },
        "end": {
          "line": 1831,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
          "column": 42
        }
      },
      "elements": [
        {
          "description": "A `<px-data-grid-column>` is used to configure how a column in `<px-data-grid>`\nshould look like by using HTML templates.\nA column can have a template for each of the three table sections: header, body and footer.\n\nThe `class` attribute is used to differentiate header and footer templates from the body template.\n\n#### Example:\n```html\n<px-data-grid-column>\n  <template class=\"header\">I'm in the header</template>\n  <template>I'm in the body</template>\n  <template class=\"footer\">I'm in the footer</template>\n</px-data-grid-column>\n```",
          "summary": "",
          "path": "px-data-grid-column.html",
          "properties": [
            {
              "name": "resizable",
              "type": "boolean",
              "description": "When set to true, the column is user-resizable.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "headerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "footerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 50,
                  "column": 8
                },
                "end": {
                  "line": 52,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "type": "boolean",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "description": "When set to true, the cells for this column are hidden.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozen",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_order",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatus",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 79,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 81,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_grid",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 85,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "width",
              "type": "string",
              "description": "Width of the cells for this column.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 382,
                  "column": 10
                },
                "end": {
                  "line": 385,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"100px\"",
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "flexGrow",
              "type": "number",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 390,
                  "column": 10
                },
                "end": {
                  "line": 393,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "1",
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "template",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 398,
                  "column": 10
                },
                "end": {
                  "line": 400,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "_cells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 402,
                  "column": 10
                },
                "end": {
                  "line": 402,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Name of column is used on table action menu to offer hide/show functionality. As headers are fully optional\nand might not even contain the name of column, this separate value is required if you use table action menu.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 39,
                  "column": 12
                },
                "end": {
                  "line": 41,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "path",
              "type": "string",
              "description": "Path of column is used for the 'Group by column' functionality.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 12
                },
                "end": {
                  "line": 48,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "mappedObject",
              "type": "Object",
              "description": "Just a trick to map generated column instance to matching data object.\nCan be also used to update object when properties change.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 12
                },
                "end": {
                  "line": 57,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_mappedObjectChanged\""
                }
              }
            },
            {
              "name": "_headerCellContentWrapper",
              "type": "Element",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 12
                },
                "end": {
                  "line": 61,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "type",
              "type": "string",
              "description": "Type of the column. Can be string, number or date.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 12
                },
                "end": {
                  "line": 70,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_typeChanged\""
                }
              },
              "defaultValue": "\"string\""
            },
            {
              "name": "_permittedTypes",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 12
                },
                "end": {
                  "line": 75,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[\"string\",\"number\",\"date\"]"
            },
            {
              "name": "isDataColumn",
              "type": "boolean",
              "description": "Just to help to identify columns with data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 12
                },
                "end": {
                  "line": 83,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "groupByColumnAllowed",
              "type": "boolean",
              "description": "If false, 'Group by Column' will be disallowed (e.g. in cases of remote data provider or expandable rows)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 12
                },
                "end": {
                  "line": 90,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 12
                },
                "end": {
                  "line": 92,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 106,
                  "column": 4
                },
                "end": {
                  "line": 126,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 129,
                  "column": 4
                },
                "end": {
                  "line": 143,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 177,
                  "column": 4
                },
                "end": {
                  "line": 179,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 181,
                  "column": 4
                },
                "end": {
                  "line": 183,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 185,
                  "column": 4
                },
                "end": {
                  "line": 187,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareTemplatizer",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 189,
                  "column": 4
                },
                "end": {
                  "line": 200,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 202,
                  "column": 4
                },
                "end": {
                  "line": 220,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 104,
                  "column": 8
                },
                "end": {
                  "line": 121,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                },
                {
                  "name": "headerCell"
                }
              ]
            },
            {
              "name": "_stampFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 233,
                  "column": 4
                },
                "end": {
                  "line": 242,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                },
                {
                  "name": "footerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_selectFirstTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 244,
                  "column": 4
                },
                "end": {
                  "line": 248,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_findTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 250,
                  "column": 4
                },
                "end": {
                  "line": 259,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_flexGrowChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 261,
                  "column": 4
                },
                "end": {
                  "line": 267,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flexGrow"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_orderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 269,
                  "column": 4
                },
                "end": {
                  "line": 271,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_widthChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 273,
                  "column": 4
                },
                "end": {
                  "line": 279,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_frozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 281,
                  "column": 4
                },
                "end": {
                  "line": 289,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 297,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "lastFrozen"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_toggleAttribute",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 299,
                  "column": 4
                },
                "end": {
                  "line": 305,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "on"
                },
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 307,
                  "column": 4
                },
                "end": {
                  "line": 309,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reorderStatus"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_resizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 311,
                  "column": 4
                },
                "end": {
                  "line": 332,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "resizable"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_hiddenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 334,
                  "column": 4
                },
                "end": {
                  "line": 345,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_updateI18n",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 123,
                  "column": 8
                },
                "end": {
                  "line": 129,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "localize"
                },
                {
                  "name": "_headerCellContentWrapper"
                }
              ]
            },
            {
              "name": "_typeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 8
                },
                "end": {
                  "line": 135,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "type"
                }
              ]
            },
            {
              "name": "_mappedObjectChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 137,
                  "column": 8
                },
                "end": {
                  "line": 145,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "obj"
                }
              ]
            },
            {
              "name": "_checkIfValueChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 147,
                  "column": 8
                },
                "end": {
                  "line": 156,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                },
                {
                  "name": "propertyName"
                }
              ]
            },
            {
              "name": "_columnHiddenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 158,
                  "column": 8
                },
                "end": {
                  "line": 160,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden"
                }
              ]
            },
            {
              "name": "_columnFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 8
                },
                "end": {
                  "line": 164,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                }
              ]
            },
            {
              "name": "_fireStatusChange",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 166,
                  "column": 8
                },
                "end": {
                  "line": 180,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "mappedObject"
                },
                {
                  "name": "propertyName"
                },
                {
                  "name": "value"
                },
                {
                  "name": "updatedModel"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridColumnElement",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 382,
                  "column": 10
                },
                "end": {
                  "line": 385,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 390,
                  "column": 10
                },
                "end": {
                  "line": 393,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number",
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "name",
              "description": "Name of column is used on table action menu to offer hide/show functionality. As headers are fully optional\nand might not even contain the name of column, this separate value is required if you use table action menu.",
              "sourceRange": {
                "start": {
                  "line": 39,
                  "column": 12
                },
                "end": {
                  "line": 41,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "path",
              "description": "Path of column is used for the 'Group by column' functionality.",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 12
                },
                "end": {
                  "line": 48,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "mapped-object",
              "description": "Just a trick to map generated column instance to matching data object.\nCan be also used to update object when properties change.",
              "sourceRange": {
                "start": {
                  "line": 54,
                  "column": 12
                },
                "end": {
                  "line": 57,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "type",
              "description": "Type of the column. Can be string, number or date.",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 12
                },
                "end": {
                  "line": 70,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "is-data-column",
              "description": "Just to help to identify columns with data",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 12
                },
                "end": {
                  "line": 83,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "group-by-column-allowed",
              "description": "If false, 'Group by Column' will be disallowed (e.g. in cases of remote data provider or expandable rows)",
              "sourceRange": {
                "start": {
                  "line": 88,
                  "column": 12
                },
                "end": {
                  "line": 90,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 12
                },
                "end": {
                  "line": 92,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-column"
        },
        {
          "description": "Auto filtering field used by px-data-grid",
          "summary": "",
          "path": "px-auto-filter-field.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "placeholder",
              "type": "string",
              "description": "Placeholder text shown in field",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 12
                },
                "end": {
                  "line": 42,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "timeout",
              "type": "number",
              "description": "Timeout value in milliseconds",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 12
                },
                "end": {
                  "line": 50,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "400"
            },
            {
              "name": "value",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 12
                },
                "end": {
                  "line": 56,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true,
                  "observer": "\"_onChange\""
                }
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_onChange",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 8
                },
                "end": {
                  "line": 71,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 29,
              "column": 6
            },
            "end": {
              "line": 72,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.AutoFilterFieldElement",
          "attributes": [
            {
              "name": "placeholder",
              "description": "Placeholder text shown in field",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 12
                },
                "end": {
                  "line": 42,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "timeout",
              "description": "Timeout value in milliseconds",
              "sourceRange": {
                "start": {
                  "line": 47,
                  "column": 12
                },
                "end": {
                  "line": 50,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "value",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 52,
                  "column": 12
                },
                "end": {
                  "line": 56,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "value-changed",
              "description": "Fired when the `value` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-auto-filter-field"
        },
        {
          "description": "`<px-data-grid-select-all>` is a helper element for the `<px-data-grid>`\nto be used to offer master select all and sorting functionality in\nmultiselect mode.",
          "summary": "",
          "path": "px-data-grid-select-all.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "indeterminate",
              "type": "boolean",
              "description": "If checkbox is in indeterminate mode",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 12
                },
                "end": {
                  "line": 46,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "checked",
              "type": "boolean",
              "description": "If checkbox is currently checked",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 12
                },
                "end": {
                  "line": 54,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "count",
              "type": "number",
              "description": "Count of selected items",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 12
                },
                "end": {
                  "line": 62,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "allowSortBySelection",
              "type": "boolean",
              "description": "If user is allowed to sort by selection",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 12
                },
                "end": {
                  "line": 70,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "checkListener",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 12
                },
                "end": {
                  "line": 74,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_onSelectAllCheckedChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 8
                },
                "end": {
                  "line": 82,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 6
            },
            "end": {
              "line": 83,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridSelectAllElement",
          "attributes": [
            {
              "name": "indeterminate",
              "description": "If checkbox is in indeterminate mode",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 12
                },
                "end": {
                  "line": 46,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "checked",
              "description": "If checkbox is currently checked",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 12
                },
                "end": {
                  "line": 54,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "count",
              "description": "Count of selected items",
              "sourceRange": {
                "start": {
                  "line": 59,
                  "column": 12
                },
                "end": {
                  "line": 62,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "allow-sort-by-selection",
              "description": "If user is allowed to sort by selection",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 12
                },
                "end": {
                  "line": 70,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "check-listener",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 12
                },
                "end": {
                  "line": 74,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-select-all",
          "mixins": [
            "Polymer.Element"
          ]
        },
        {
          "description": "`<px-data-grid-selection-column>` is a helper element for the `<px-data-grid>`\nto be used to offer selection column behavior with multi and single select.",
          "summary": "",
          "path": "px-data-grid-selection-column.html",
          "properties": [
            {
              "name": "resizable",
              "type": "boolean",
              "description": "When set to true, the column is user-resizable.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "headerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 123,
                  "column": 10
                },
                "end": {
                  "line": 123,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "footerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 50,
                  "column": 8
                },
                "end": {
                  "line": 52,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "type": "boolean",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "description": "When set to true, the cells for this column are hidden.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozen",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_order",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatus",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 79,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 81,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_grid",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 85,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "width",
              "type": "string",
              "description": "Width of the cells for this column.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"56px\""
            },
            {
              "name": "flexGrow",
              "type": "number",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "template",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 10
                },
                "end": {
                  "line": 128,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_cells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 402,
                  "column": 10
                },
                "end": {
                  "line": 402,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "selectAll",
              "type": "boolean",
              "description": "When true, all the items are selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "autoSelect",
              "type": "boolean",
              "description": "When true, the active gets automatically selected.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "multiSelect",
              "type": "boolean",
              "description": "When true, user is allowed to multiselect",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "true"
            },
            {
              "name": "treeGrid",
              "type": "boolean",
              "description": "When true, the grid is in tree-grid mode (group by column/value)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 108,
                  "column": 10
                },
                "end": {
                  "line": 110,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "allowSortBySelection",
              "type": "boolean",
              "description": "If user is allowed to sort by selection",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 118,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_indeterminate",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 10
                },
                "end": {
                  "line": 133,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_previousActiveItem",
              "type": "Object",
              "description": "The previous state of activeItem. When activeItem turns to `null`,\npreviousActiveItem will have an Object with just unselected activeItem",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 139,
                  "column": 10
                },
                "end": {
                  "line": 139,
                  "column": 37
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_selectAllHidden",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 141,
                  "column": 10
                },
                "end": {
                  "line": 144,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "true"
            },
            {
              "name": "isDataColumn",
              "type": "boolean",
              "description": "Just to help to identify columns without data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 10
                },
                "end": {
                  "line": 153,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "_selectionCount",
              "type": "number",
              "description": "Current selection count",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 158,
                  "column": 10
                },
                "end": {
                  "line": 161,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 229,
                  "column": 6
                },
                "end": {
                  "line": 243,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 202,
                  "column": 6
                },
                "end": {
                  "line": 226,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 177,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 181,
                  "column": 4
                },
                "end": {
                  "line": 183,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 185,
                  "column": 6
                },
                "end": {
                  "line": 191,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareTemplatizer",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 189,
                  "column": 4
                },
                "end": {
                  "line": 200,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 202,
                  "column": 4
                },
                "end": {
                  "line": 220,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 222,
                  "column": 4
                },
                "end": {
                  "line": 231,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 233,
                  "column": 4
                },
                "end": {
                  "line": 242,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                },
                {
                  "name": "footerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_selectFirstTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 244,
                  "column": 4
                },
                "end": {
                  "line": 248,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_findTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 250,
                  "column": 4
                },
                "end": {
                  "line": 259,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_flexGrowChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 261,
                  "column": 4
                },
                "end": {
                  "line": 267,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flexGrow"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_orderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 269,
                  "column": 4
                },
                "end": {
                  "line": 271,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_widthChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 273,
                  "column": 4
                },
                "end": {
                  "line": 279,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_frozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 281,
                  "column": 4
                },
                "end": {
                  "line": 289,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 297,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "lastFrozen"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_toggleAttribute",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 299,
                  "column": 4
                },
                "end": {
                  "line": 305,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "on"
                },
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 307,
                  "column": 4
                },
                "end": {
                  "line": 309,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reorderStatus"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_resizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 311,
                  "column": 4
                },
                "end": {
                  "line": 332,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "resizable"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_hiddenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 334,
                  "column": 4
                },
                "end": {
                  "line": 345,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 172,
                  "column": 6
                },
                "end": {
                  "line": 175,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_isGroupItem",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 245,
                  "column": 6
                },
                "end": {
                  "line": 247,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                }
              ]
            },
            {
              "name": "_onSelectAllChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 249,
                  "column": 6
                },
                "end": {
                  "line": 263,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selectAll"
                }
              ]
            },
            {
              "name": "_arrayContains",
              "description": "We need this when sorting or to preserve selection after filtering.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 267,
                  "column": 6
                },
                "end": {
                  "line": 270,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "a"
                },
                {
                  "name": "b"
                }
              ]
            },
            {
              "name": "_onSelectAllCheckedChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 272,
                  "column": 6
                },
                "end": {
                  "line": 279,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_isChecked",
              "description": "iOS needs indeterminated + checked at the same time",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 282,
                  "column": 6
                },
                "end": {
                  "line": 284,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selectAll"
                },
                {
                  "name": "indeterminate"
                }
              ]
            },
            {
              "name": "_onActiveItemChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 286,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_onSelectedItemsChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 297,
                  "column": 6
                },
                "end": {
                  "line": 315,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_onDataProviderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 317,
                  "column": 6
                },
                "end": {
                  "line": 319,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_onMultiSelectOrAllowSortBySelectionChanged",
              "description": "Function that makes sure there is enough space for all content",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 324,
                  "column": 6
                },
                "end": {
                  "line": 332,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "multiSelect"
                },
                {
                  "name": "allowSortBySelection"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 333,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridSelectionColumnElement",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 10
                },
                "end": {
                  "line": 70,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "sourceRange": {
                "start": {
                  "line": 75,
                  "column": 10
                },
                "end": {
                  "line": 78,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "select-all",
              "description": "When true, all the items are selected.",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 10
                },
                "end": {
                  "line": 87,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "auto-select",
              "description": "When true, the active gets automatically selected.",
              "sourceRange": {
                "start": {
                  "line": 92,
                  "column": 10
                },
                "end": {
                  "line": 95,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "multi-select",
              "description": "When true, user is allowed to multiselect",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 10
                },
                "end": {
                  "line": 103,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "tree-grid",
              "description": "When true, the grid is in tree-grid mode (group by column/value)",
              "sourceRange": {
                "start": {
                  "line": 108,
                  "column": 10
                },
                "end": {
                  "line": 110,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "allow-sort-by-selection",
              "description": "If user is allowed to sort by selection",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 10
                },
                "end": {
                  "line": 118,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "is-data-column",
              "description": "Just to help to identify columns without data",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 10
                },
                "end": {
                  "line": 153,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "select-all-changed",
              "description": "Fired when the `selectAll` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-selection-column",
          "mixins": [
            "Vaadin.GridColumnElement"
          ]
        },
        {
          "description": "`<px-data-grid-toggle-details-column>` is a helper element for the `<px-data-grid>`\nto be used to toggle row expansion (row details) column behavior.",
          "summary": "",
          "path": "px-data-grid-toggle-details-column.html",
          "properties": [
            {
              "name": "resizable",
              "type": "boolean",
              "description": "When set to true, the column is user-resizable.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "headerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "footerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 50,
                  "column": 8
                },
                "end": {
                  "line": 52,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "type": "boolean",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "description": "When set to true, the cells for this column are hidden.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozen",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_order",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatus",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 79,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 81,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_grid",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 85,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "width",
              "type": "string",
              "description": "Width of the cells for this column.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"30px\""
            },
            {
              "name": "flexGrow",
              "type": "number",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 48,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "template",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_cells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 402,
                  "column": 10
                },
                "end": {
                  "line": 402,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "isDataColumn",
              "type": "boolean",
              "description": "Identify column as non-data column",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 57,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "_indeterminate",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 64,
                  "column": 10
                },
                "end": {
                  "line": 64,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 106,
                  "column": 4
                },
                "end": {
                  "line": 126,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 129,
                  "column": 4
                },
                "end": {
                  "line": 143,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 177,
                  "column": 4
                },
                "end": {
                  "line": 179,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 181,
                  "column": 4
                },
                "end": {
                  "line": 183,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 69,
                  "column": 6
                },
                "end": {
                  "line": 75,
                  "column": 7
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareTemplatizer",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 189,
                  "column": 4
                },
                "end": {
                  "line": 200,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 202,
                  "column": 4
                },
                "end": {
                  "line": 220,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 222,
                  "column": 4
                },
                "end": {
                  "line": 231,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 233,
                  "column": 4
                },
                "end": {
                  "line": 242,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                },
                {
                  "name": "footerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_selectFirstTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 244,
                  "column": 4
                },
                "end": {
                  "line": 248,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_findTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 250,
                  "column": 4
                },
                "end": {
                  "line": 259,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_flexGrowChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 261,
                  "column": 4
                },
                "end": {
                  "line": 267,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flexGrow"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_orderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 269,
                  "column": 4
                },
                "end": {
                  "line": 271,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_widthChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 273,
                  "column": 4
                },
                "end": {
                  "line": 279,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_frozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 281,
                  "column": 4
                },
                "end": {
                  "line": 289,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 297,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "lastFrozen"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_toggleAttribute",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 299,
                  "column": 4
                },
                "end": {
                  "line": 305,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "on"
                },
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 307,
                  "column": 4
                },
                "end": {
                  "line": 309,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reorderStatus"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_resizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 311,
                  "column": 4
                },
                "end": {
                  "line": 332,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "resizable"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_hiddenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 334,
                  "column": 4
                },
                "end": {
                  "line": 345,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_onToggleClick",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 77,
                  "column": 6
                },
                "end": {
                  "line": 85,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "name": "_getChevronIcon",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 87,
                  "column": 6
                },
                "end": {
                  "line": 89,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "detailsOpened"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 91,
              "column": 5
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridToggleDetailsColumnElement",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 10
                },
                "end": {
                  "line": 40,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "sourceRange": {
                "start": {
                  "line": 45,
                  "column": 10
                },
                "end": {
                  "line": 48,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "is-data-column",
              "description": "Identify column as non-data column",
              "sourceRange": {
                "start": {
                  "line": 53,
                  "column": 10
                },
                "end": {
                  "line": 57,
                  "column": 11
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-toggle-details-column",
          "mixins": [
            "Vaadin.GridColumnElement"
          ]
        },
        {
          "description": "### Styling\nThe following custom properties are available for styling of the string-renderer content.\n\nCustom property | Description\n'--px-data-grid-cell-string-column-overflow' | controls the overflow behavior, visible, hidden\n'--px-data-grid-cell-string-column-white-space' | controls how white-spaces are handled, normal, nowrap\n'--px-data-grid-cell-string-column-word-wrap' | controls how word-wrapping is handled normal, break-word\n'--px-data-grid-cell-string-column-text-overflow' | controls how text-overflow is handled, clip, ellipsis\n'--px-data-grid-cell-string-column-editor-align-items | control editor alignment when in edit mode, center, flex-end, flex-start'\n\nExamples:\nMake string-renderer columns wrap the content:\n--px-data-grid-cell-string-column-overflow: hidden;\n--px-data-grid-cell-string-column-word-wrap: break-word;\n\nMake string-renderer columns use ellipsis overflow:\n--px-data-grid-cell-string-column-text-overflow: ellipsis;\n--px-data-grid-cell-string-column-white-space: nowrap;\n--px-data-grid-cell-string-column-overflow: hidden;\n\nA `<px-data-grid-string-renderer>` is standard renderer for string cell content.\nThis element shows how to implement custom renderer in order to display uncommon data.\nEach renderer that is needed for displaying content should have element with id=\"value\",\nwhich is rendered in non-editable state of the cell.\nYou may also provide element with id=\"editingTemplate\", which will display when the cell is editing.",
          "summary": "",
          "path": "px-data-grid-string-renderer.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_editing",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_editingChanged\""
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "value",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "initialValue",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "validationResult",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 25,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "column",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_showValidationError",
              "type": "boolean",
              "description": "Boolean to pair with validation error element visibility",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 36,
                  "column": 8
                },
                "end": {
                  "line": 39,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_editingChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "editing"
                },
                {
                  "name": "oldVal"
                }
              ],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_initialValueObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 70,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "restoreInitial",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 74,
                  "column": 4
                },
                "end": {
                  "line": 76,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_performValidation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 78,
                  "column": 4
                },
                "end": {
                  "line": 83,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "validate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 8
                },
                "end": {
                  "line": 70,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "applyValue",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "getClasses",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 8
                },
                "end": {
                  "line": 74,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "result"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridStringRenderer",
          "attributes": [
            {
              "name": "value",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "initial-value",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "validation-result",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 25,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "column",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "Function",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-string-renderer",
          "mixins": [
            "Predix.DataGridRendererMixin"
          ]
        },
        {
          "description": "### Styling\nThe following custom properties are available for styling of the date-renderer content.\n\nCustom property | Description\n'--px-data-grid-cell-date-column-overflow' | controls the overflow behavior, visible, hidden\n'--px-data-grid-cell-date-column-white-space' | controls how white-spaces are handled, normal, nowrap\n'--px-data-grid-cell-date-column-word-wrap' | controls how word-wrapping is handled normal, break-word\n'--px-data-grid-cell-date-column-text-overflow' | controls how text-overflow is handled, clip, ellipsis\n'--px-data-grid-cell-date-column-editor-align-items | control editor alignment when in edit mode, center, flex-end, flex-start'\n\nExamples:\nMake date-renderer columns wrap the content:\n--px-data-grid-cell-date-column-overflow: hidden;\n--px-data-grid-cell-date-column-word-wrap: break-word;\n\nMake date-renderer columns use ellipsis overflow:\n--px-data-grid-cell-date-column-text-overflow: ellipsis;\n--px-data-grid-cell-date-column-white-space: nowrap;\n--px-data-grid-cell-date-column-overflow: hidden;\n\nA `<px-data-grid-date-renderer>` is standard renderer for date cell content.\nThis element shows how to implement custom renderer in order to display uncommon data.\nEach renderer that is needed for displaying content should have element with id=\"value\",\nwhich is rendered in non-editable state of the cell.\nYou may also provide element with id=\"editingTemplate\", which will display when the cell is editing.",
          "summary": "",
          "path": "px-data-grid-date-renderer.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_editing",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_editingChanged\""
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "value",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "initialValue",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "validationResult",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 25,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "column",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_showValidationError",
              "type": "boolean",
              "description": "Boolean to pair with validation error element visibility",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 36,
                  "column": 8
                },
                "end": {
                  "line": 39,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "momentObj",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
<<<<<<< HEAD
                  "line": 50,
                  "column": 12
                },
                "end": {
                  "line": 52,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "displayFormat",
              "type": "string",
              "description": "Format to be displayed in the cell\nA moment.js string formatter or 'ISO'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 57,
                  "column": 12
                },
                "end": {
                  "line": 60,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"YYYY-MM-DD HH:mm:ss\""
            },
            {
              "name": "dataFormat",
              "type": "string",
              "description": "Format for reading the data\nA moment.js string formatter or 'ISO'",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 12
                },
                "end": {
                  "line": 68,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"DD-MM-YYY\""
            },
            {
              "name": "hideDate",
              "type": "boolean",
              "description": "Hides the date part of the datetime picker when the cell is in edit mode",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 12
                },
                "end": {
                  "line": 75,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "hideTime",
              "type": "boolean",
              "description": "Hides the time part of the datetime picker when the cell is in edit mode",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 12
                },
                "end": {
                  "line": 82,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_initialType",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 12
                },
                "end": {
                  "line": 85,
=======
                  "line": 73,
                  "column": 12
                },
                "end": {
                  "line": 75,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_editingChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "editing"
                },
                {
                  "name": "oldVal"
                }
              ],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_initialValueObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 70,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "restoreInitial",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 74,
                  "column": 4
                },
                "end": {
                  "line": 76,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_performValidation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 78,
                  "column": 4
                },
                "end": {
                  "line": 83,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "validate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
<<<<<<< HEAD
                  "line": 113,
                  "column": 8
                },
                "end": {
                  "line": 118,
=======
                  "line": 90,
                  "column": 8
                },
                "end": {
                  "line": 95,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "applyValue",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_getFormattedDate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
<<<<<<< HEAD
                  "line": 97,
                  "column": 8
                },
                "end": {
                  "line": 111,
=======
                  "line": 86,
                  "column": 8
                },
                "end": {
                  "line": 88,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "_valueObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
<<<<<<< HEAD
                  "line": 120,
                  "column": 8
                },
                "end": {
                  "line": 129,
=======
                  "line": 97,
                  "column": 8
                },
                "end": {
                  "line": 101,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "_momentObjChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
<<<<<<< HEAD
                  "line": 131,
                  "column": 8
                },
                "end": {
                  "line": 147,
=======
                  "line": 103,
                  "column": 8
                },
                "end": {
                  "line": 111,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "momentObj"
                }
              ]
            },
            {
              "name": "_rendererConfigChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 8
                },
                "end": {
                  "line": 162,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 43,
              "column": 6
            },
            "end": {
              "line": 163,
=======
              "line": 66,
              "column": 6
            },
            "end": {
              "line": 112,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridDateRenderer",
          "attributes": [
            {
              "name": "value",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "initial-value",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "validation-result",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 25,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "column",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "Function",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "moment-obj",
              "description": "",
              "sourceRange": {
                "start": {
<<<<<<< HEAD
                  "line": 50,
                  "column": 12
                },
                "end": {
                  "line": 52,
=======
                  "line": 73,
                  "column": 12
                },
                "end": {
                  "line": 75,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "display-format",
              "description": "Format to be displayed in the cell\nA moment.js string formatter or 'ISO'",
              "sourceRange": {
                "start": {
                  "line": 57,
                  "column": 12
                },
                "end": {
                  "line": 60,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "data-format",
              "description": "Format for reading the data\nA moment.js string formatter or 'ISO'",
              "sourceRange": {
                "start": {
                  "line": 65,
                  "column": 12
                },
                "end": {
                  "line": 68,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "hide-date",
              "description": "Hides the date part of the datetime picker when the cell is in edit mode",
              "sourceRange": {
                "start": {
                  "line": 72,
                  "column": 12
                },
                "end": {
                  "line": 75,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "hide-time",
              "description": "Hides the time part of the datetime picker when the cell is in edit mode",
              "sourceRange": {
                "start": {
                  "line": 79,
                  "column": 12
                },
                "end": {
                  "line": 82,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-date-renderer",
          "mixins": [
            "Predix.DataGridRendererMixin"
          ]
        },
        {
          "description": "### Styling\nThe following custom properties are available for styling of the number-renderer content.\n\nCustom property | Description\n'--px-data-grid-cell-number-column-overflow' | controls the overflow behavior, visible, hidden\n'--px-data-grid-cell-number-column-white-space' | controls how white-spaces are handled, normal, nowrap\n'--px-data-grid-cell-number-column-word-wrap' | controls how word-wrapping is handled normal, break-word\n'--px-data-grid-cell-number-column-text-overflow' | controls how text-overflow is handled, clip, ellipsis\n'--px-data-grid-cell-number-column-editor-align-items | control editor alignment when in edit mode, center, flex-end, flex-start'\n\nExamples:\nMake number-renderer columns wrap the content:\n--px-data-grid-cell-number-column-overflow: hidden;\n--px-data-grid-cell-number-column-word-wrap: break-word;\n\nMake number-renderer columns use ellipsis overflow:\n--px-data-grid-cell-number-column-text-overflow: ellipsis;\n--px-data-grid-cell-number-column-white-space: nowrap;\n--px-data-grid-cell-number-column-overflow: hidden;\n\nA `<px-data-grid-number-renderer>` is standard renderer for number cell content.\nThis element shows how to implement custom renderer in order to display uncommon data.\nEach renderer that is needed for displaying content should have element with id=\"value\",\nwhich is rendered in non-editable state of the cell.\nYou may also provide element with id=\"editingTemplate\", which will display when the cell is editing.",
          "summary": "",
          "path": "px-data-grid-number-renderer.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_editing",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_editingChanged\""
                }
              },
              "defaultValue": "false",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "value",
              "type": "number",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 12
                },
                "end": {
                  "line": 68,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "initialValue",
              "type": "number",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 12
                },
                "end": {
                  "line": 72,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "validationResult",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 25,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "column",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_showValidationError",
              "type": "boolean",
              "description": "Boolean to pair with validation error element visibility",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 36,
                  "column": 8
                },
                "end": {
                  "line": 39,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Predix.DataGridRendererMixin"
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_editingChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "editing"
                },
                {
                  "name": "oldVal"
                }
              ],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_initialValueObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 70,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "restoreInitial",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 74,
                  "column": 4
                },
                "end": {
                  "line": 76,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_performValidation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 78,
                  "column": 4
                },
                "end": {
                  "line": 83,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "validate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 8
                },
                "end": {
                  "line": 98,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "applyValue",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "_valueObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 100,
                  "column": 8
                },
                "end": {
                  "line": 104,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "getClasses",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 108,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "result"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 109,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridNumberRenderer",
          "attributes": [
            {
              "name": "value",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 12
                },
                "end": {
                  "line": 68,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "initial-value",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 12
                },
                "end": {
                  "line": 72,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "validation-result",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 25,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "column",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "file": "px-data-grid-renderer-mixin.html",
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "Function",
              "inheritedFrom": "Predix.DataGridRendererMixin"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-number-renderer",
          "mixins": [
            "Predix.DataGridRendererMixin"
          ]
        },
        {
          "description": "A `<px-data-grid-cell-content-wrapper>` is used to wrap user\nor generated content in order to fire proper events and observe renderers.",
          "summary": "",
          "path": "px-data-grid-cell-content-wrapper.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "item",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 21,
                  "column": 12
                },
                "end": {
                  "line": 23,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "column",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 12
                },
                "end": {
                  "line": 26,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "cellColor",
              "type": "string",
              "description": "Color of cell, if 'default' will use default highlight color",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 12
                },
                "end": {
                  "line": 33,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_cellColorChanged\""
                }
              }
            },
            {
              "name": "_itemWas",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 35,
                  "column": 12
                },
                "end": {
                  "line": 38,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 12
                },
                "end": {
                  "line": 40,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_valueElement",
              "type": "Element",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 42,
                  "column": 12
                },
                "end": {
                  "line": 42,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 74,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "focus",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_fireCellHoverEvent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 95,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "name": "_fireCellUnhoverEvent",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 8
                },
                "end": {
                  "line": 109,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "name": "_valueChangedListener",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 111,
                  "column": 8
                },
                "end": {
                  "line": 117,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "name": "_cellColorChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 8
                },
                "end": {
                  "line": 129,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "color"
                }
              ]
            },
            {
              "name": "_render",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 131,
                  "column": 8
                },
                "end": {
                  "line": 165,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "renderer"
                },
                {
                  "name": "path"
                },
                {
                  "name": "editable"
                },
                {
                  "name": "item"
                },
                {
                  "name": "localize"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 14,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridCellContentWrapperElement",
          "attributes": [
            {
              "name": "item",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 21,
                  "column": 12
                },
                "end": {
                  "line": 23,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "column",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 24,
                  "column": 12
                },
                "end": {
                  "line": 26,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "cell-color",
              "description": "Color of cell, if 'default' will use default highlight color",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 12
                },
                "end": {
                  "line": 33,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 40,
                  "column": 12
                },
                "end": {
                  "line": 40,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-cell-content-wrapper"
        },
        {
          "description": "",
          "summary": "",
          "path": "px-data-grid-filter-entity.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "columns",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 12
                },
                "end": {
                  "line": 113,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "tableData",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 12
                },
                "end": {
                  "line": 115,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "entity",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 117,
                  "column": 12
                },
                "end": {
                  "line": 119,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "compactMode",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 12
                },
                "end": {
                  "line": 124,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_mappedColumns",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 126,
                  "column": 12
                },
                "end": {
                  "line": 126,
                  "column": 33
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_regexPatterns",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 12
                },
                "end": {
                  "line": 152,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "_numberConditions",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 154,
                  "column": 12
                },
                "end": {
                  "line": 182,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "_minNumberBound",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 184,
                  "column": 12
                },
                "end": {
                  "line": 184,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_maxNumberBound",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 186,
                  "column": 12
                },
                "end": {
                  "line": 186,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_dateFrom",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 188,
                  "column": 12
                },
                "end": {
                  "line": 190,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_dateTo",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 192,
                  "column": 12
                },
                "end": {
                  "line": 194,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 196,
                  "column": 12
                },
                "end": {
                  "line": 196,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_localizeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 212,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "localize"
                }
              ]
            },
            {
              "name": "_columnNumberBoundsObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 226,
                  "column": 8
                },
                "end": {
                  "line": 241,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "entity"
                }
              ]
            },
            {
              "name": "_entityObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 243,
                  "column": 8
                },
                "end": {
                  "line": 253,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "entity"
                }
              ]
            },
            {
              "name": "_resolveColumnName",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 255,
                  "column": 8
                },
                "end": {
                  "line": 257,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "column"
                }
              ]
            },
            {
              "name": "_setMappedColumns",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 259,
                  "column": 8
                },
                "end": {
                  "line": 279,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columns"
                },
                {
                  "name": "columnsSplices"
                }
              ]
            },
            {
              "name": "_columnTypeIsString",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 281,
                  "column": 8
                },
                "end": {
                  "line": 285,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columnId"
                }
              ]
            },
            {
              "name": "_columnTypeIsDate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 287,
                  "column": 8
                },
                "end": {
                  "line": 291,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columnId"
                }
              ]
            },
            {
              "name": "_columnTypeIsNumber",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 293,
                  "column": 8
                },
                "end": {
                  "line": 297,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columnId"
                }
              ]
            },
            {
              "name": "_getColumnById",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 299,
                  "column": 8
                },
                "end": {
                  "line": 312,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columnId"
                }
              ]
            },
            {
              "name": "_filterActiveObservable",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 314,
                  "column": 8
                },
                "end": {
                  "line": 327,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "entity"
                }
              ]
            },
            {
              "name": "_momentDatesObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 329,
                  "column": 8
                },
                "end": {
                  "line": 336,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dateFrom"
                },
                {
                  "name": "dateTo"
                }
              ]
            },
            {
              "name": "_entityDatesObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 338,
                  "column": 8
                },
                "end": {
                  "line": 345,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "entity"
                }
              ]
            },
            {
              "name": "_showSlider",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 347,
                  "column": 8
                },
                "end": {
                  "line": 349,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "minBound"
                },
                {
                  "name": "maxBound"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 350,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridFilterEntityElement",
          "attributes": [
            {
              "name": "columns",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 12
                },
                "end": {
                  "line": 113,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "table-data",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 12
                },
                "end": {
                  "line": 115,
                  "column": 28
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "entity",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 117,
                  "column": 12
                },
                "end": {
                  "line": 119,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "compact-mode",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 121,
                  "column": 12
                },
                "end": {
                  "line": 124,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 196,
                  "column": 12
                },
                "end": {
                  "line": 196,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-filter-entity"
        },
        {
          "description": "",
          "summary": "",
          "path": "px-data-grid-filter-section.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "section",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 12
                },
                "end": {
                  "line": 65,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_actions",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 12
                },
                "end": {
                  "line": 83,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "_operationTypes",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 12
                },
                "end": {
                  "line": 97,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "columns",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 99,
                  "column": 12
                },
                "end": {
                  "line": 101,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "compactMode",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 103,
                  "column": 12
                },
                "end": {
                  "line": 106,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_compactModeEnabled",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 108,
                  "column": 12
                },
                "end": {
                  "line": 111,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 12
                },
                "end": {
                  "line": 113,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 127,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_localizeChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 129,
                  "column": 8
                },
                "end": {
                  "line": 141,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "localize"
                }
              ]
            },
            {
              "name": "_addEntity",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 8
                },
                "end": {
                  "line": 145,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_removeEntity",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 147,
                  "column": 8
                },
                "end": {
                  "line": 149,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "name": "_hasAnyEntity",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 151,
                  "column": 8
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "section"
                }
              ]
            },
            {
              "name": "_hasEntityWithCustomPresentation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 155,
                  "column": 8
                },
                "end": {
                  "line": 169,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "entity"
                }
              ]
            },
            {
              "name": "_isEntityCompact",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 171,
                  "column": 8
                },
                "end": {
                  "line": 173,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "compactModeEnabled"
                },
                {
                  "name": "index"
                }
              ]
            },
            {
              "name": "_checkCompactMode",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 175,
                  "column": 8
                },
                "end": {
                  "line": 183,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "compactMode"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 6
            },
            "end": {
              "line": 184,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridFilterSectionElement",
          "attributes": [
            {
              "name": "section",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 63,
                  "column": 12
                },
                "end": {
                  "line": 65,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "columns",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 99,
                  "column": 12
                },
                "end": {
                  "line": 101,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "compact-mode",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 103,
                  "column": 12
                },
                "end": {
                  "line": 106,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 113,
                  "column": 12
                },
                "end": {
                  "line": 113,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-filter-section"
        },
        {
          "description": "",
          "summary": "",
          "path": "px-data-grid-filter.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "columns",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 12
                },
                "end": {
                  "line": 39,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "filters",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 12
                },
                "end": {
                  "line": 44,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "tempFilters",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 12
                },
                "end": {
                  "line": 49,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "compactMode",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 12
                },
                "end": {
                  "line": 54,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 12
                },
                "end": {
                  "line": 56,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "Stamps the element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 540,
                  "column": 6
                },
                "end": {
                  "line": 546,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_addGroup",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_filtersObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 76,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filters"
                }
              ]
            },
            {
              "name": "applyFilters",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 8
                },
                "end": {
                  "line": 80,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "cancelChanges",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 82,
                  "column": 8
                },
                "end": {
                  "line": 84,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "resetFilters",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 86,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_restoreTempFilters",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 90,
                  "column": 8
                },
                "end": {
                  "line": 92,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 6
            },
            "end": {
              "line": 93,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridFilterElement",
          "attributes": [
            {
              "name": "columns",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 37,
                  "column": 12
                },
                "end": {
                  "line": 39,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "filters",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 12
                },
                "end": {
                  "line": 44,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "temp-filters",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 46,
                  "column": 12
                },
                "end": {
                  "line": 49,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "compact-mode",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 12
                },
                "end": {
                  "line": 54,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 56,
                  "column": 12
                },
                "end": {
                  "line": 56,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "filters-changed",
              "description": "Fired when the `filters` property changes.",
              "metadata": {}
            },
            {
              "type": "CustomEvent",
              "name": "temp-filters-changed",
              "description": "Fired when the `tempFilters` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-filter"
        },
        {
          "description": "",
          "summary": "",
          "path": "px-data-grid-filters-modal.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "columns",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 12
                },
                "end": {
                  "line": 60,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "filters",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 12
                },
                "end": {
                  "line": 65,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "notify": true
                }
              }
            },
            {
              "name": "initialFilterState",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 12
                },
                "end": {
                  "line": 69,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "offerFilterSaving",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 12
                },
                "end": {
                  "line": 74,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "compactMode",
              "type": "boolean",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 12
                },
                "end": {
                  "line": 79,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_tempFilters",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 12
                },
                "end": {
                  "line": 83,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 12
                },
                "end": {
                  "line": 85,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 8
                },
                "end": {
                  "line": 95,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_apply",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 97,
                  "column": 8
                },
                "end": {
                  "line": 117,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_cancel",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 119,
                  "column": 8
                },
                "end": {
                  "line": 122,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_reset",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 127,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_hasAnyEntity",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 129,
                  "column": 8
                },
                "end": {
                  "line": 131,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filters"
                }
              ]
            },
            {
              "name": "_showSaveCheckbox",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 133,
                  "column": 8
                },
                "end": {
                  "line": 135,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "offerFilterSaving"
                },
                {
                  "name": "filters"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 53,
              "column": 6
            },
            "end": {
              "line": 136,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridFiltersModalElement",
          "attributes": [
            {
              "name": "columns",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 60,
                  "column": 12
                },
                "end": {
                  "line": 60,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "filters",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 12
                },
                "end": {
                  "line": 65,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "initial-filter-state",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 67,
                  "column": 12
                },
                "end": {
                  "line": 69,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "offer-filter-saving",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 12
                },
                "end": {
                  "line": 74,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "compact-mode",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 12
                },
                "end": {
                  "line": 79,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 12
                },
                "end": {
                  "line": 85,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [
            {
              "type": "CustomEvent",
              "name": "filters-changed",
              "description": "Fired when the `filters` property changes.",
              "metadata": {}
            }
          ],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-filters-modal"
        },
        {
          "description": "",
          "summary": "",
          "path": "px-data-grid-filters-preview.html",
          "properties": [
            {
              "name": "__dataClientsReady",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1139,
                  "column": 8
                },
                "end": {
                  "line": 1139,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPendingClients",
              "type": "Array",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1141,
                  "column": 8
                },
                "end": {
                  "line": 1141,
                  "column": 34
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataToNotify",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1143,
                  "column": 8
                },
                "end": {
                  "line": 1143,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataLinkedPaths",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1145,
                  "column": 8
                },
                "end": {
                  "line": 1145,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHasPaths",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1147,
                  "column": 8
                },
                "end": {
                  "line": 1147,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataCompoundStorage",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1149,
                  "column": 8
                },
                "end": {
                  "line": 1149,
                  "column": 35
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataHost",
              "type": "Polymer_PropertyEffects",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1151,
                  "column": 8
                },
                "end": {
                  "line": 1151,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataTemp",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1153,
                  "column": 8
                },
                "end": {
                  "line": 1153,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataClientsInitialized",
              "type": "boolean",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1155,
                  "column": 8
                },
                "end": {
                  "line": 1155,
                  "column": 38
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__data",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1157,
                  "column": 8
                },
                "end": {
                  "line": 1157,
                  "column": 20
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataPending",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1159,
                  "column": 8
                },
                "end": {
                  "line": 1159,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__dataOld",
              "type": "!Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1161,
                  "column": 8
                },
                "end": {
                  "line": 1161,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__computeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1163,
                  "column": 8
                },
                "end": {
                  "line": 1163,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__reflectEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1165,
                  "column": 8
                },
                "end": {
                  "line": 1165,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__notifyEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1167,
                  "column": 8
                },
                "end": {
                  "line": 1167,
                  "column": 29
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__propagateEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1169,
                  "column": 8
                },
                "end": {
                  "line": 1169,
                  "column": 32
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__observeEffects",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1171,
                  "column": 8
                },
                "end": {
                  "line": 1171,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__readOnly",
              "type": "Object",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1173,
                  "column": 8
                },
                "end": {
                  "line": 1173,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__templateInfo",
              "type": "!TemplateInfo",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1175,
                  "column": 8
                },
                "end": {
                  "line": 1175,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_template",
              "type": "HTMLTemplateElement",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 421,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_importPath",
              "type": "string",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 423,
                  "column": 8
                },
                "end": {
                  "line": 423,
                  "column": 25
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "rootPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 425,
                  "column": 8
                },
                "end": {
                  "line": 425,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "importPath",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 427,
                  "column": 8
                },
                "end": {
                  "line": 427,
                  "column": 24
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "root",
              "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 429,
                  "column": 8
                },
                "end": {
                  "line": 429,
                  "column": 18
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "$",
              "type": "!Object.<string, !Element>",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 431,
                  "column": 8
                },
                "end": {
                  "line": 431,
                  "column": 15
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": false
                }
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "filters",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 12
                },
                "end": {
                  "line": 64,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "flattenFilterEntities",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 12
                },
                "end": {
                  "line": 69,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              }
            },
            {
              "name": "filtersLimit",
              "type": "number",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 12
                },
                "end": {
                  "line": 74,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "5"
            },
            {
              "name": "columns",
              "type": "Array",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 12
                },
                "end": {
                  "line": 78,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 12
                },
                "end": {
                  "line": 80,
                  "column": 30
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_stampTemplate",
              "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2415,
                  "column": 6
                },
                "end": {
                  "line": 2440,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to stamp"
                }
              ],
              "return": {
                "type": "!StampedTemplate",
                "desc": "Cloned template content"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addMethodEventListenerToNode",
              "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 452,
                  "column": 6
                },
                "end": {
                  "line": 457,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add listener on"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "methodName",
                  "type": "string",
                  "description": "Name of method"
                },
                {
                  "name": "context",
                  "type": "*=",
                  "description": "Context the method will be called on (defaults\n  to `node`)"
                }
              ],
              "return": {
                "type": "Function",
                "desc": "Generated handler function"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_addEventListenerToNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 467,
                  "column": 6
                },
                "end": {
                  "line": 469,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "Node to add event listener to"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to add"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_removeEventListenerFromNode",
              "description": "Override point for adding custom or simulated event handling.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 479,
                  "column": 6
                },
                "end": {
                  "line": 481,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to remove event listener from"
                },
                {
                  "name": "eventName",
                  "type": "string",
                  "description": "Name of event"
                },
                {
                  "name": "handler",
                  "type": "function (!Event): void",
                  "description": "Listener function to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_createPropertyAccessor",
              "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 115,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_addPropertyToAttributeMap",
              "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 124,
                  "column": 8
                },
                "end": {
                  "line": 132,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                }
              ],
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_definePropertyAccessor",
              "description": "Defines a property accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 140,
                  "column": 9
                },
                "end": {
                  "line": 153,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "readOnly",
                  "type": "boolean=",
                  "description": "When true, no setter is created"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 84,
                  "column": 8
                },
                "end": {
                  "line": 104,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_initializeProperties",
              "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 446,
                  "column": 6
                },
                "end": {
                  "line": 480,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_initializeInstanceProperties",
              "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 222,
                  "column": 8
                },
                "end": {
                  "line": 224,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of property values that were overwritten\n  when creating property accessors."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setProperty",
              "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 235,
                  "column": 8
                },
                "end": {
                  "line": 239,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_getProperty",
              "description": "Returns the value for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 247,
                  "column": 8
                },
                "end": {
                  "line": 249,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value for the given property"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_setPendingProperty",
              "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 264,
                  "column": 8
                },
                "end": {
                  "line": 280,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of the property"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "ext",
                  "type": "boolean=",
                  "description": "Not used here; affordance for closure"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property changed"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_invalidateProperties",
              "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 290,
                  "column": 8
                },
                "end": {
                  "line": 300,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_enableProperties",
              "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 313,
                  "column": 8
                },
                "end": {
                  "line": 322,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_flushProperties",
              "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 333,
                  "column": 8
                },
                "end": {
                  "line": 339,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertiesChanged",
              "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 353,
                  "column": 8
                },
                "end": {
                  "line": 354,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "currentProps",
                  "type": "!Object",
                  "description": "Bag of all current accessor values"
                },
                {
                  "name": "changedProps",
                  "type": "!Object",
                  "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
                },
                {
                  "name": "oldProps",
                  "type": "!Object",
                  "description": "Bag of previous values for each property\n  in `changedProps`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_shouldPropertyChange",
              "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 374,
                  "column": 8
                },
                "end": {
                  "line": 381,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "New property value"
                },
                {
                  "name": "old",
                  "type": "*",
                  "description": "Previous property value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "attributeChangedCallback",
              "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 393,
                  "column": 8
                },
                "end": {
                  "line": 400,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of attribute that changed"
                },
                {
                  "name": "old",
                  "type": "?string",
                  "description": "Old attribute value"
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "New attribute value"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_attributeToProperty",
              "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 414,
                  "column": 8
                },
                "end": {
                  "line": 421,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to deserialize."
                },
                {
                  "name": "value",
                  "type": "?string",
                  "description": "of the attribute."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_propertyToAttribute",
              "description": "Serializes a property to its associated attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 433,
                  "column": 8
                },
                "end": {
                  "line": 439,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name to reflect."
                },
                {
                  "name": "attribute",
                  "type": "string=",
                  "description": "Attribute name to reflect to."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Property value to refect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_valueToNodeAttribute",
              "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 454,
                  "column": 8
                },
                "end": {
                  "line": 461,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Element to set attribute to."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to serialize."
                },
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Attribute name to serialize to."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_serializeValue",
              "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 474,
                  "column": 8
                },
                "end": {
                  "line": 481,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "*",
                  "description": "Property value to serialize."
                }
              ],
              "return": {
                "type": "(string|undefined)",
                "desc": "String serialized from the provided\nproperty  value."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_deserializeValue",
              "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 495,
                  "column": 8
                },
                "end": {
                  "line": 504,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value",
                  "type": "?string",
                  "description": "Value to deserialize."
                },
                {
                  "name": "type",
                  "type": "*=",
                  "description": "Type to deserialize the string to."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Typed value deserialized from the provided string."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "_initializeProtoProperties",
              "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1209,
                  "column": 6
                },
                "end": {
                  "line": 1213,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Properties to initialize on the prototype"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_ensureAttribute",
              "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 192,
                  "column": 6
                },
                "end": {
                  "line": 197,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "attribute",
                  "type": "string",
                  "description": "Name of attribute to ensure is set."
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "of the attribute."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_hasAccessor",
              "description": "Returns true if this library created an accessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 299,
                  "column": 6
                },
                "end": {
                  "line": 301,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if an accessor was created"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_isPropertyPending",
              "description": "Returns true if the specified property has a pending change.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 310,
                  "column": 6
                },
                "end": {
                  "line": 312,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if property has a pending change"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "_addPropertyEffect",
              "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1247,
                  "column": 6
                },
                "end": {
                  "line": 1255,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removePropertyEffect",
              "description": "Removes the given property effect.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1265,
                  "column": 6
                },
                "end": {
                  "line": 1271,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property the effect was associated with"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object to remove"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasPropertyEffect",
              "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1282,
                  "column": 6
                },
                "end": {
                  "line": 1285,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "type",
                  "type": "string=",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReadOnlyEffect",
              "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1295,
                  "column": 6
                },
                "end": {
                  "line": 1297,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasNotifyEffect",
              "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1307,
                  "column": 6
                },
                "end": {
                  "line": 1309,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasReflectEffect",
              "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1319,
                  "column": 6
                },
                "end": {
                  "line": 1321,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_hasComputedEffect",
              "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1331,
                  "column": 6
                },
                "end": {
                  "line": 1333,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "True if the prototype/instance has an effect of this type"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setPendingPropertyOrPath",
              "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1365,
                  "column": 6
                },
                "end": {
                  "line": 1397,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(number|string)>)",
                  "description": "Path to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set"
                },
                {
                  "name": "shouldNotify",
                  "type": "boolean=",
                  "description": "Set to true if this change should\n cause a property notification event dispatch"
                },
                {
                  "name": "isPathNotification",
                  "type": "boolean=",
                  "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_setUnmanagedPropertyToNode",
              "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1420,
                  "column": 6
                },
                "end": {
                  "line": 1428,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "!Node",
                  "description": "The node to set a property on"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "The property to set"
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "The value to set"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_enqueueClient",
              "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1535,
                  "column": 6
                },
                "end": {
                  "line": 1540,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "client",
                  "type": "Object",
                  "description": "PropertyEffects client to enqueue"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_flushClients",
              "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1561,
                  "column": 6
                },
                "end": {
                  "line": 1572,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "__enableOrFlushClients",
              "description": "(c) the stamped dom enables.",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1586,
                  "column": 6
                },
                "end": {
                  "line": 1599,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_readyClients",
              "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 558,
                  "column": 6
                },
                "end": {
                  "line": 567,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "setProperties",
              "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1628,
                  "column": 6
                },
                "end": {
                  "line": 1639,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
                },
                {
                  "name": "setReadOnly",
                  "type": "boolean=",
                  "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_propagatePropertyChanges",
              "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1726,
                  "column": 6
                },
                "end": {
                  "line": 1736,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "changedProps",
                  "type": "Object",
                  "description": "Bag of changed properties"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "linkPaths",
              "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1747,
                  "column": 6
                },
                "end": {
                  "line": 1752,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "to",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to link."
                },
                {
                  "name": "from",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Source path to link."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unlinkPaths",
              "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1764,
                  "column": 6
                },
                "end": {
                  "line": 1769,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Target path to unlink."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifySplices",
              "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1801,
                  "column": 6
                },
                "end": {
                  "line": 1805,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "splices",
                  "type": "Array",
                  "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "get",
              "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1826,
                  "column": 6
                },
                "end": {
                  "line": 1828,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "set",
              "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1851,
                  "column": 6
                },
                "end": {
                  "line": 1861,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
                },
                {
                  "name": "value",
                  "type": "*",
                  "description": "Value to set at the specified path."
                },
                {
                  "name": "root",
                  "type": "Object=",
                  "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "push",
              "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1877,
                  "column": 6
                },
                "end": {
                  "line": 1886,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to push onto array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "pop",
              "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1901,
                  "column": 6
                },
                "end": {
                  "line": 1910,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "splice",
              "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1929,
                  "column": 6
                },
                "end": {
                  "line": 1966,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "start",
                  "type": "number",
                  "description": "Index from which to start removing/inserting."
                },
                {
                  "name": "deleteCount",
                  "type": "number",
                  "description": "Number of items to remove."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert into array."
                }
              ],
              "return": {
                "type": "Array",
                "desc": "Array of removed items."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "shift",
              "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 1981,
                  "column": 6
                },
                "end": {
                  "line": 1990,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                }
              ],
              "return": {
                "type": "*",
                "desc": "Item that was removed."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "unshift",
              "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2006,
                  "column": 6
                },
                "end": {
                  "line": 2014,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "(string|!Array.<(string|number)>)",
                  "description": "Path to array."
                },
                {
                  "name": "items",
                  "type": "...*",
                  "rest": true,
                  "description": "Items to insert info array"
                }
              ],
              "return": {
                "type": "number",
                "desc": "New length of the array."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "notifyPath",
              "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2029,
                  "column": 6
                },
                "end": {
                  "line": 2046,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "path",
                  "type": "string",
                  "description": "Path that should be notified."
                },
                {
                  "name": "value",
                  "type": "*=",
                  "description": "Value at the path (optional)."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReadOnlyProperty",
              "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2059,
                  "column": 6
                },
                "end": {
                  "line": 2066,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createPropertyObserver",
              "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2080,
                  "column": 6
                },
                "end": {
                  "line": 2090,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createMethodObserver",
              "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2103,
                  "column": 6
                },
                "end": {
                  "line": 2109,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createNotifyingProperty",
              "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2120,
                  "column": 6
                },
                "end": {
                  "line": 2128,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createReflectedProperty",
              "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2139,
                  "column": 6
                },
                "end": {
                  "line": 2152,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_createComputedProperty",
              "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2166,
                  "column": 6
                },
                "end": {
                  "line": 2172,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_bindTemplate",
              "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2349,
                  "column": 6
                },
                "end": {
                  "line": 2372,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                },
                {
                  "name": "instanceBinding",
                  "type": "boolean=",
                  "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_removeBoundDom",
              "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2451,
                  "column": 6
                },
                "end": {
                  "line": 2472,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "!StampedTemplate",
                  "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "connectedCallback",
              "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 527,
                  "column": 6
                },
                "end": {
                  "line": 532,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "disconnectedCallback",
              "description": "Called when the element is removed from a document",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 215,
                  "column": 6
                },
                "end": {
                  "line": 219,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_attachDom",
              "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 581,
                  "column": 6
                },
                "end": {
                  "line": 597,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "dom",
                  "type": "StampedTemplate",
                  "description": "to attach to the element."
                }
              ],
              "return": {
                "type": "ShadowRoot",
                "desc": "node to which the dom has been attached."
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "updateStyles",
              "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 617,
                  "column": 6
                },
                "end": {
                  "line": 621,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "properties",
                  "type": "Object=",
                  "description": "Bag of custom property key/values to\n  apply to this element."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "resolveUrl",
              "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 638,
                  "column": 6
                },
                "end": {
                  "line": 643,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "url",
                  "type": "string",
                  "description": "URL to resolve."
                },
                {
                  "name": "base",
                  "type": "string=",
                  "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Rewritten URL relative to base"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_dispatchClearFilters",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 106,
                  "column": 8
                },
                "end": {
                  "line": 113,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_getColumnById",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 115,
                  "column": 8
                },
                "end": {
                  "line": 126,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "columnId"
                }
              ]
            },
            {
              "name": "_getFlattenFilterEntities",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 128,
                  "column": 8
                },
                "end": {
                  "line": 133,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filters"
                }
              ]
            },
            {
              "name": "_capitalizeString",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 135,
                  "column": 8
                },
                "end": {
                  "line": 137,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "str"
                }
              ]
            },
            {
              "name": "_underscoreToHumanReadable",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 139,
                  "column": 8
                },
                "end": {
                  "line": 141,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "str"
                }
              ]
            },
            {
              "name": "_getTooltipMessage",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 143,
                  "column": 8
                },
                "end": {
                  "line": 162,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "entity"
                },
                {
                  "name": "section"
                }
              ]
            },
            {
              "name": "_getChipTitle",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 164,
                  "column": 8
                },
                "end": {
                  "line": 184,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "entity"
                }
              ]
            },
            {
              "name": "_filtersGrouped",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 186,
                  "column": 8
                },
                "end": {
                  "line": 188,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flattenFilterEntities"
                }
              ]
            },
            {
              "name": "_hasMultipleFilters",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 190,
                  "column": 8
                },
                "end": {
                  "line": 192,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flattenFilterEntities"
                }
              ]
            }
          ],
          "staticMethods": [
            {
              "name": "_parseTemplate",
              "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 197,
                  "column": 6
                },
                "end": {
                  "line": 208,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template to parse"
                },
                {
                  "name": "outerTemplateInfo",
                  "type": "TemplateInfo=",
                  "description": "Template metadata from the outer\n  template, for parsing nested templates"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Parsed template metadata"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateContent",
              "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 654,
                  "column": 6
                },
                "end": {
                  "line": 657,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "templateInfo"
                },
                {
                  "name": "nodeInfo"
                }
              ],
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_parseTemplateNode",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2491,
                  "column": 6
                },
                "end": {
                  "line": 2505,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateChildNodes",
              "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 258,
                  "column": 6
                },
                "end": {
                  "line": 295,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "root",
                  "type": "Node",
                  "description": "Root node whose `childNodes` will be parsed"
                },
                {
                  "name": "templateInfo",
                  "type": "!TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "!NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNestedTemplate",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2578,
                  "column": 6
                },
                "end": {
                  "line": 2588,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Node",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseTemplateNodeAttributes",
              "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 333,
                  "column": 6
                },
                "end": {
                  "line": 342,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template."
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "_parseTemplateNodeAttribute",
              "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2526,
                  "column": 6
                },
                "end": {
                  "line": 2562,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "node",
                  "type": "Element",
                  "description": "Node to parse"
                },
                {
                  "name": "templateInfo",
                  "type": "TemplateInfo",
                  "description": "Template metadata for current template"
                },
                {
                  "name": "nodeInfo",
                  "type": "NodeInfo",
                  "description": "Node metadata for current template node"
                },
                {
                  "name": "name",
                  "type": "string",
                  "description": "Attribute name"
                },
                {
                  "name": "value",
                  "type": "string",
                  "description": "Attribute value"
                }
              ],
              "return": {
                "type": "boolean",
                "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_contentForTemplate",
              "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/template-stamp.html",
                "start": {
                  "line": 388,
                  "column": 6
                },
                "end": {
                  "line": 391,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "HTMLTemplateElement",
                  "description": "Template to retrieve `content` for"
                }
              ],
              "return": {
                "type": "DocumentFragment",
                "desc": "Content fragment"
              },
              "inheritedFrom": "Polymer.TemplateStamp"
            },
            {
              "name": "createProperties",
              "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 325,
                  "column": 7
                },
                "end": {
                  "line": 329,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "props"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "attributeNameForProperty",
              "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-changed.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property to convert"
                }
              ],
              "return": {
                "type": "string",
                "desc": "Attribute name corresponding to the given property."
              },
              "inheritedFrom": "Polymer.PropertiesChanged"
            },
            {
              "name": "typeForProperty",
              "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 180,
                  "column": 6
                },
                "end": {
                  "line": 183,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name",
                  "type": "string",
                  "description": "Name of property"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Type to which to deserialize attribute"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "createPropertiesForAttributes",
              "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-accessors.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 133,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyAccessors"
            },
            {
              "name": "addPropertyEffect",
              "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2212,
                  "column": 6
                },
                "end": {
                  "line": 2214,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "type",
                  "type": "string",
                  "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createPropertyObserver",
              "description": "Creates a single-property observer for the given property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2226,
                  "column": 6
                },
                "end": {
                  "line": 2228,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "method",
                  "type": "(string|function (*, *))",
                  "description": "Function or name of observer method to call"
                },
                {
                  "name": "dynamicFn",
                  "type": "boolean=",
                  "description": "Whether the method name should be included as\n  a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createMethodObserver",
              "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2243,
                  "column": 6
                },
                "end": {
                  "line": 2245,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating"
                }
              ],
              "return": {
                "type": "void",
                "desc": "whether method names should be included as a dependency to the effect."
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createNotifyingProperty",
              "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2255,
                  "column": 6
                },
                "end": {
                  "line": 2257,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReadOnlyProperty",
              "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2275,
                  "column": 6
                },
                "end": {
                  "line": 2277,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                },
                {
                  "name": "protectedSetter",
                  "type": "boolean=",
                  "description": "Creates a custom protected setter\n  when `true`."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createReflectedProperty",
              "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2287,
                  "column": 6
                },
                "end": {
                  "line": 2289,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Property name"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "createComputedProperty",
              "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2305,
                  "column": 6
                },
                "end": {
                  "line": 2307,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "property",
                  "type": "string",
                  "description": "Name of computed property to set"
                },
                {
                  "name": "expression",
                  "type": "string",
                  "description": "Method expression"
                },
                {
                  "name": "dynamicFn",
                  "type": "(boolean|Object)=",
                  "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "bindTemplate",
              "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2321,
                  "column": 6
                },
                "end": {
                  "line": 2323,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template",
                  "type": "!HTMLTemplateElement",
                  "description": "Template containing binding\n  bindings"
                }
              ],
              "return": {
                "type": "!TemplateInfo",
                "desc": "Template metadata object"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_addTemplatePropertyEffect",
              "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2387,
                  "column": 6
                },
                "end": {
                  "line": 2393,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Template metadata to add effect to"
                },
                {
                  "name": "prop",
                  "type": "string",
                  "description": "Property that should trigger the effect"
                },
                {
                  "name": "effect",
                  "type": "Object=",
                  "description": "Effect metadata object"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_parseBindings",
              "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2623,
                  "column": 6
                },
                "end": {
                  "line": 2688,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "text",
                  "type": "string",
                  "description": "Text to parse from attribute or textContent"
                },
                {
                  "name": "templateInfo",
                  "type": "Object",
                  "description": "Current template metadata"
                }
              ],
              "return": {
                "type": "Array.<!BindingPart>",
                "desc": "Array of binding part metadata"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "_evaluateBinding",
              "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/property-effects.html",
                "start": {
                  "line": 2704,
                  "column": 6
                },
                "end": {
                  "line": 2721,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "inst",
                  "type": "this",
                  "description": "Element that should be used as scope for\n  binding dependencies"
                },
                {
                  "name": "part",
                  "type": "BindingPart",
                  "description": "Binding part metadata"
                },
                {
                  "name": "path",
                  "type": "string",
                  "description": "Property/path that triggered this effect"
                },
                {
                  "name": "props",
                  "type": "Object",
                  "description": "Bag of current property changes"
                },
                {
                  "name": "oldProps",
                  "type": "Object",
                  "description": "Bag of previous values for changed properties"
                },
                {
                  "name": "hasPaths",
                  "type": "boolean",
                  "description": "True with `props` contains one or more paths"
                }
              ],
              "return": {
                "type": "*",
                "desc": "Value the binding part evaluated to"
              },
              "inheritedFrom": "Polymer.PropertyEffects"
            },
            {
              "name": "finalize",
              "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
                "start": {
                  "line": 128,
                  "column": 6
                },
                "end": {
                  "line": 137,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.PropertiesMixin"
            },
            {
              "name": "_finalizeClass",
              "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 293,
                  "column": 5
                },
                "end": {
                  "line": 316,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "createObservers",
              "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 342,
                  "column": 6
                },
                "end": {
                  "line": 347,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "observers",
                  "type": "Object",
                  "description": "Array of observer descriptors for\n  this class"
                },
                {
                  "name": "dynamicFns",
                  "type": "Object",
                  "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_processStyleText",
              "description": "Gather style text for a style element in the template.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 490,
                  "column": 6
                },
                "end": {
                  "line": 492,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "cssText",
                  "type": "string",
                  "description": "Text containing styling to process"
                },
                {
                  "name": "baseURI",
                  "type": "string",
                  "description": "Base URI to rebase CSS paths against"
                }
              ],
              "return": {
                "type": "string",
                "desc": "The processed CSS text"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            },
            {
              "name": "_finalizeTemplate",
              "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/polymer/lib/mixins/element-mixin.html",
                "start": {
                  "line": 503,
                  "column": 6
                },
                "end": {
                  "line": 514,
                  "column": 7
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "is",
                  "type": "string",
                  "description": "Tag name (or type extension name) for this element"
                }
              ],
              "return": {
                "type": "void"
              },
              "inheritedFrom": "Polymer.ElementMixin"
            }
          ],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridFiltersPreviewElement",
          "attributes": [
            {
              "name": "filters",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 62,
                  "column": 12
                },
                "end": {
                  "line": 64,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "flatten-filter-entities",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 12
                },
                "end": {
                  "line": 69,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "filters-limit",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 71,
                  "column": 12
                },
                "end": {
                  "line": 74,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "columns",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 76,
                  "column": 12
                },
                "end": {
                  "line": 78,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 80,
                  "column": 12
                },
                "end": {
                  "line": 80,
                  "column": 30
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-filters-preview"
        },
        {
          "description": "`<px-data-grid-action-column>` is a helper element for the `<px-data-grid>`\nto be used to offer action column behavior with action and edit functionality.",
          "summary": "",
          "path": "px-data-grid-action-column.html",
          "properties": [
            {
              "name": "resizable",
              "type": "boolean",
              "description": "When set to true, the column is user-resizable.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "headerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 43,
                  "column": 8
                },
                "end": {
                  "line": 45,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "footerTemplate",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 50,
                  "column": 8
                },
                "end": {
                  "line": 52,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "type": "boolean",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "type": "boolean",
              "description": "When set to true, the cells for this column are hidden.",
              "privacy": "public",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozen",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 73,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_order",
              "type": "number",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 75,
                  "column": 8
                },
                "end": {
                  "line": 75,
                  "column": 22
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatus",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 77,
                  "column": 8
                },
                "end": {
                  "line": 77,
                  "column": 31
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_emptyCells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 79,
                  "column": 8
                },
                "end": {
                  "line": 79,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_headerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 81,
                  "column": 8
                },
                "end": {
                  "line": 81,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_footerCell",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 83,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 27
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_grid",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 85,
                  "column": 8
                },
                "end": {
                  "line": 85,
                  "column": 21
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "width",
              "type": "string",
              "description": "Width of the cells for this column.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 12
                },
                "end": {
                  "line": 61,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "\"80px\""
            },
            {
              "name": "flexGrow",
              "type": "number",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 12
                },
                "end": {
                  "line": 84,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "0"
            },
            {
              "name": "template",
              "type": "Object",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 398,
                  "column": 10
                },
                "end": {
                  "line": 400,
                  "column": 11
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "_cells",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 402,
                  "column": 10
                },
                "end": {
                  "line": 402,
                  "column": 23
                }
              },
              "metadata": {
                "polymer": {}
              },
              "inheritedFrom": "Vaadin.GridColumnElement"
            },
            {
              "name": "save",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 42,
                  "column": 12
                },
                "end": {
                  "line": 42,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "cancel",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 12
                },
                "end": {
                  "line": 43,
                  "column": 28
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "edit",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 12
                },
                "end": {
                  "line": 44,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "isDataColumn",
              "type": "boolean",
              "description": "Just to help to identify columns without data",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 12
                },
                "end": {
                  "line": 53,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {
                  "readOnly": true
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "edittedItem",
              "type": "Object",
              "description": "Currently editted object",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 12
                },
                "end": {
                  "line": 68,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "editMode",
              "type": "boolean",
              "description": "Is component in edit mode (if false no edit options will be offered)",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 12
                },
                "end": {
                  "line": 76,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "itemActions",
              "type": "Array",
              "description": "Item actions offered to end user.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 12
                },
                "end": {
                  "line": 92,
                  "column": 13
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            }
          ],
          "methods": [
            {
              "name": "connectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "start": {
                  "line": 153,
                  "column": 8
                },
                "end": {
                  "line": 160,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "disconnectedCallback",
              "description": "",
              "privacy": "private",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 129,
                  "column": 4
                },
                "end": {
                  "line": 143,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 114,
                  "column": 8
                },
                "end": {
                  "line": 120,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 181,
                  "column": 4
                },
                "end": {
                  "line": 183,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_prepareBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 122,
                  "column": 8
                },
                "end": {
                  "line": 128,
                  "column": 9
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_prepareTemplatizer",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 189,
                  "column": 4
                },
                "end": {
                  "line": 200,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "instanceProps"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampBodyTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 130,
                  "column": 8
                },
                "end": {
                  "line": 150,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "template"
                },
                {
                  "name": "cells"
                }
              ]
            },
            {
              "name": "_stampHeaderTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 222,
                  "column": 4
                },
                "end": {
                  "line": 231,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "headerTemplate"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_stampFooterTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 233,
                  "column": 4
                },
                "end": {
                  "line": 242,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "footerTemplate"
                },
                {
                  "name": "footerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_selectFirstTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 244,
                  "column": 4
                },
                "end": {
                  "line": 248,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_findTemplate",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 250,
                  "column": 4
                },
                "end": {
                  "line": 259,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "selector"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_flexGrowChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 261,
                  "column": 4
                },
                "end": {
                  "line": 267,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "flexGrow"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_orderChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 269,
                  "column": 4
                },
                "end": {
                  "line": 271,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "order"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_widthChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 273,
                  "column": 4
                },
                "end": {
                  "line": 279,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "width"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_frozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 281,
                  "column": 4
                },
                "end": {
                  "line": 289,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "frozen"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_lastFrozenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 291,
                  "column": 4
                },
                "end": {
                  "line": 297,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "lastFrozen"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_toggleAttribute",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 299,
                  "column": 4
                },
                "end": {
                  "line": 305,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "on"
                },
                {
                  "name": "element"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_reorderStatusChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 307,
                  "column": 4
                },
                "end": {
                  "line": 309,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "reorderStatus"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_resizableChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 311,
                  "column": 4
                },
                "end": {
                  "line": 332,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "resizable"
                },
                {
                  "name": "headerCell"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_hiddenChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 334,
                  "column": 4
                },
                "end": {
                  "line": 345,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "hidden"
                },
                {
                  "name": "headerCell"
                },
                {
                  "name": "footerCell"
                },
                {
                  "name": "cells"
                }
              ],
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "_toggleEditClassName",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 102,
                  "column": 8
                },
                "end": {
                  "line": 112,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "edittedItem"
                }
              ]
            },
            {
              "name": "_offerEditButtonFor",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 162,
                  "column": 8
                },
                "end": {
                  "line": 164,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "editingItem"
                },
                {
                  "name": "item"
                },
                {
                  "name": "editMode"
                }
              ]
            },
            {
              "name": "_offerItemActions",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 166,
                  "column": 8
                },
                "end": {
                  "line": 168,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "editingItem"
                },
                {
                  "name": "item"
                }
              ]
            },
            {
              "name": "_isItemEditing",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 170,
                  "column": 8
                },
                "end": {
                  "line": 172,
                  "column": 9
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                },
                {
                  "name": "editingItem"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 6
            },
            "end": {
              "line": 173,
              "column": 7
            }
          },
          "privacy": "public",
          "superclass": "HTMLElement",
          "name": "Predix.DataGridActionColumnElement",
          "attributes": [
            {
              "name": "resizable",
              "description": "When set to true, the column is user-resizable.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 38,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "frozen",
              "description": "When true, the column is frozen. When a column inside of a column group is frozen,\nall of the sibling columns inside the group will get frozen also.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 58,
                  "column": 8
                },
                "end": {
                  "line": 61,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "hidden",
              "description": "When set to true, the cells for this column are hidden.",
              "sourceRange": {
                "file": "bower_components/vaadin-grid/vaadin-grid-column.html",
                "start": {
                  "line": 66,
                  "column": 8
                },
                "end": {
                  "line": 68,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean",
              "inheritedFrom": "Vaadin.Grid.ColumnBaseMixin"
            },
            {
              "name": "width",
              "description": "Width of the cells for this column.",
              "sourceRange": {
                "start": {
                  "line": 58,
                  "column": 12
                },
                "end": {
                  "line": 61,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "flex-grow",
              "description": "Flex grow ratio for the cell widths. When set to 0, cell width is fixed.",
              "sourceRange": {
                "start": {
                  "line": 81,
                  "column": 12
                },
                "end": {
                  "line": 84,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "number"
            },
            {
              "name": "save",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 42,
                  "column": 12
                },
                "end": {
                  "line": 42,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "Function"
            },
            {
              "name": "cancel",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 12
                },
                "end": {
                  "line": 43,
                  "column": 28
                }
              },
              "metadata": {},
              "type": "Function"
            },
            {
              "name": "edit",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 44,
                  "column": 12
                },
                "end": {
                  "line": 44,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "Function"
            },
            {
              "name": "is-data-column",
              "description": "Just to help to identify columns without data",
              "sourceRange": {
                "start": {
                  "line": 49,
                  "column": 12
                },
                "end": {
                  "line": 53,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "editted-item",
              "description": "Currently editted object",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 12
                },
                "end": {
                  "line": 68,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "edit-mode",
              "description": "Is component in edit mode (if false no edit options will be offered)",
              "sourceRange": {
                "start": {
                  "line": 73,
                  "column": 12
                },
                "end": {
                  "line": 76,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "boolean"
            },
            {
              "name": "item-actions",
              "description": "Item actions offered to end user.",
              "sourceRange": {
                "start": {
                  "line": 89,
                  "column": 12
                },
                "end": {
                  "line": 92,
                  "column": 13
                }
              },
              "metadata": {},
              "type": "Array"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": [],
          "tagname": "px-data-grid-action-column",
          "mixins": [
            "Vaadin.GridColumnElement"
          ]
        }
      ],
      "mixins": [
        {
          "description": "Mixin, that provides common functionality for all renderers.\nYou need to implement this mixin in your own renderers.",
          "summary": "",
          "path": "px-data-grid-renderer-mixin.html",
          "properties": [
            {
              "name": "_editing",
              "type": "boolean",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {
                  "observer": "\"_editingChanged\""
                }
              },
              "defaultValue": "false"
            },
            {
              "name": "value",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "initialValue",
              "type": "string",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "validationResult",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 25,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "column",
              "type": "Object",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_showValidationError",
              "type": "boolean",
              "description": "Boolean to pair with validation error element visibility",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 36,
                  "column": 8
                },
                "end": {
                  "line": 39,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "localize",
              "type": "Function",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 26
                }
              },
              "metadata": {
                "polymer": {}
              }
            }
          ],
          "methods": [
            {
              "name": "_editingChanged",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "editing"
                },
                {
                  "name": "oldVal"
                }
              ]
            },
            {
              "name": "_initialValueObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "restoreInitial",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 74,
                  "column": 4
                },
                "end": {
                  "line": 76,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_performValidation",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 78,
                  "column": 4
                },
                "end": {
                  "line": 83,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "validate",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 85,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "applyValue",
              "description": "",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 91,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 106,
              "column": 3
            }
          },
          "privacy": "public",
          "name": "Predix.DataGridRendererMixin",
          "attributes": [
            {
              "name": "value",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 17,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "initial-value",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 21,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "string"
            },
            {
              "name": "validation-result",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 25,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "column",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 29,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "Object"
            },
            {
              "name": "localize",
              "description": "",
              "sourceRange": {
                "start": {
                  "line": 41,
                  "column": 8
                },
                "end": {
                  "line": 41,
                  "column": 26
                }
              },
              "metadata": {},
              "type": "Function"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        },
        {
          "description": "Mixin, that provides advanced filter functionality for px-data-grid.",
          "summary": "",
          "path": "px-data-grid-filterable-mixin.html",
          "properties": [
            {
              "name": "filterable",
              "type": "boolean",
              "description": "If true, turns on advanced filtering.",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "false"
            },
            {
              "name": "_filters",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 18,
                  "column": 8
                },
                "end": {
                  "line": 20,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              }
            },
            {
              "name": "_initialFilterState",
              "type": "Array",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 22,
                  "column": 8
                },
                "end": {
                  "line": 25,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            },
            {
              "name": "_filterHighlights",
              "type": "Array",
              "description": "Array of highlights from px-data-grid-filter component.",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 30,
                  "column": 8
                },
                "end": {
                  "line": 33,
                  "column": 9
                }
              },
              "metadata": {
                "polymer": {}
              },
              "defaultValue": "[]"
            }
          ],
          "methods": [
            {
              "name": "ready",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 64,
                  "column": 5
                }
              },
              "metadata": {},
              "params": []
            },
            {
              "name": "_escapeRegExp",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 66,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "str"
                }
              ]
            },
            {
              "name": "_isStringMatches",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 70,
                  "column": 4
                },
                "end": {
                  "line": 96,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filter"
                },
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "_isDateMatches",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 98,
                  "column": 4
                },
                "end": {
                  "line": 110,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filter"
                },
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "_isNumberMatches",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 112,
                  "column": 4
                },
                "end": {
                  "line": 147,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filter"
                },
                {
                  "name": "value"
                }
              ]
            },
            {
              "name": "_matchesFilter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 149,
                  "column": 4
                },
                "end": {
                  "line": 159,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "item"
                },
                {
                  "name": "column"
                },
                {
                  "name": "entity"
                }
              ]
            },
            {
              "name": "_applyCustomFilter",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 161,
                  "column": 4
                },
                "end": {
                  "line": 210,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "items"
                },
                {
                  "name": "columns"
                },
                {
                  "name": "filters"
                }
              ]
            },
            {
              "name": "_constructHighilightCondition",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 212,
                  "column": 4
                },
                "end": {
                  "line": 235,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "appliableFilters"
                },
                {
                  "name": "columns"
                }
              ]
            },
            {
              "name": "_filtersObserver",
              "description": "",
              "privacy": "protected",
              "sourceRange": {
                "start": {
                  "line": 237,
                  "column": 4
                },
                "end": {
                  "line": 276,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filters"
                }
              ]
            },
            {
              "name": "applyFilters",
              "description": "This method allows to pass filters and save them as default filter state.\nThis means that after clicking \"Reset\" in filters modal filters will return to this state.\nFormat of input parameter for column.type === 'string':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'first[string]',\n       active: true,\n       pattern: 'equals',\n       query: 'Wong'\n    }\n  ]\n}]\n```\nPattern can be one of `['equals', 'contains', 'starts_with', 'ends_with', 'wildcard']`.\n\nFormat for column.type === 'date':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'birth_date[date]',\n       active: true,\n       dateFrom: '1994-11-12',\n       dateTo: '1994-11-12'\n    }\n  ]\n}]\n```\n\nFormat for column.type === 'number':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'age[number]',\n       active: true,\n       condition: 'equals',\n       value: 1\n    }\n  ]\n}]\n```\n\nCondition can be one of `['equals', 'not_equal', 'greater_than', 'less_than', 'equals_or_greater_than', 'equals_or_less_than']`.\nAlso, `leftBound` and `rightBound` properties can be used instead of `condition` and `value` in order to filter by number range.\n\nFormat:\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'age[number]',\n       active: true,\n       leftBound: 1,\n       rightBound: 2\n    }\n  ]\n}]\n```",
              "privacy": "public",
              "sourceRange": {
                "start": {
                  "line": 349,
                  "column": 4
                },
                "end": {
                  "line": 352,
                  "column": 5
                }
              },
              "metadata": {},
              "params": [
                {
                  "name": "filters"
                }
              ]
            }
          ],
          "staticMethods": [],
          "demos": [],
          "metadata": {},
          "sourceRange": {
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 354,
              "column": 3
            }
          },
          "privacy": "public",
          "name": "Predix.DataGridFilterableMixin",
          "attributes": [
            {
              "name": "filterable",
              "description": "If true, turns on advanced filtering.",
              "sourceRange": {
                "start": {
                  "line": 13,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 9
                }
              },
              "metadata": {},
              "type": "boolean"
            }
          ],
          "events": [],
          "styling": {
            "cssVariables": [],
            "selectors": []
          },
          "slots": []
        }
      ]
    }
  ],
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "px-data-grid-header-cell.html",
      "properties": [
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1139,
              "column": 8
            },
            "end": {
              "line": 1139,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1141,
              "column": 8
            },
            "end": {
              "line": 1141,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1143,
              "column": 8
            },
            "end": {
              "line": 1143,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1145,
              "column": 8
            },
            "end": {
              "line": 1145,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1147,
              "column": 8
            },
            "end": {
              "line": 1147,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1149,
              "column": 8
            },
            "end": {
              "line": 1149,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1151,
              "column": 8
            },
            "end": {
              "line": 1151,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1153,
              "column": 8
            },
            "end": {
              "line": 1153,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1155,
              "column": 8
            },
            "end": {
              "line": 1155,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1157,
              "column": 8
            },
            "end": {
              "line": 1157,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1159,
              "column": 8
            },
            "end": {
              "line": 1159,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1161,
              "column": 8
            },
            "end": {
              "line": 1161,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1163,
              "column": 8
            },
            "end": {
              "line": 1163,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1165,
              "column": 8
            },
            "end": {
              "line": 1165,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1167,
              "column": 8
            },
            "end": {
              "line": 1167,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1169,
              "column": 8
            },
            "end": {
              "line": 1169,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1171,
              "column": 8
            },
            "end": {
              "line": 1171,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1173,
              "column": 8
            },
            "end": {
              "line": 1173,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1175,
              "column": 8
            },
            "end": {
              "line": 1175,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 421,
              "column": 8
            },
            "end": {
              "line": 421,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 423,
              "column": 8
            },
            "end": {
              "line": 423,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 425,
              "column": 8
            },
            "end": {
              "line": 425,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 427,
              "column": 8
            },
            "end": {
              "line": 427,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 429,
              "column": 8
            },
            "end": {
              "line": 429,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Element>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 431,
              "column": 8
            },
            "end": {
              "line": 431,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "dropdownOpened",
          "type": "boolean",
          "description": "If true, opens nested dropdown.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 12
            },
            "end": {
              "line": 35,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_dropdownOpenedChanged\""
            }
          }
        },
        {
          "name": "groupByColumnAllowed",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 12
            },
            "end": {
              "line": 40,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_dropdownHidden",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 12
            },
            "end": {
              "line": 45,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_mouseover",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 12
            },
            "end": {
              "line": 50,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "_column",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 12
            },
            "end": {
              "line": 54,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_dropdownItems",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 12
            },
            "end": {
              "line": 58,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "localize",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 12
            },
            "end": {
              "line": 60,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2415,
              "column": 6
            },
            "end": {
              "line": 2440,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 452,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 467,
              "column": 6
            },
            "end": {
              "line": 469,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 481,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_addPropertyToAttributeMap",
          "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 132,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_definePropertyAccessor",
          "description": "Defines a property accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 140,
              "column": 9
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 446,
              "column": 6
            },
            "end": {
              "line": 480,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 224,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of property values that were overwritten\n  when creating property accessors."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setProperty",
          "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 235,
              "column": 8
            },
            "end": {
              "line": 239,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_getProperty",
          "description": "Returns the value for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value for the given property"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setPendingProperty",
          "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 264,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "ext",
              "type": "boolean=",
              "description": "Not used here; affordance for closure"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_invalidateProperties",
          "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 290,
              "column": 8
            },
            "end": {
              "line": 300,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 313,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 333,
              "column": 8
            },
            "end": {
              "line": 339,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertiesChanged",
          "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "!Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "!Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 374,
              "column": 8
            },
            "end": {
              "line": 381,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 393,
              "column": 8
            },
            "end": {
              "line": 400,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 414,
              "column": 8
            },
            "end": {
              "line": 421,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 433,
              "column": 8
            },
            "end": {
              "line": 439,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect to."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 454,
              "column": 8
            },
            "end": {
              "line": 461,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 474,
              "column": 8
            },
            "end": {
              "line": 481,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided\nproperty  value."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 495,
              "column": 8
            },
            "end": {
              "line": 504,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1209,
              "column": 6
            },
            "end": {
              "line": 1213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 310,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1247,
              "column": 6
            },
            "end": {
              "line": 1255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1265,
              "column": 6
            },
            "end": {
              "line": 1271,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1282,
              "column": 6
            },
            "end": {
              "line": 1285,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1295,
              "column": 6
            },
            "end": {
              "line": 1297,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1307,
              "column": 6
            },
            "end": {
              "line": 1309,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1319,
              "column": 6
            },
            "end": {
              "line": 1321,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1331,
              "column": 6
            },
            "end": {
              "line": 1333,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1365,
              "column": 6
            },
            "end": {
              "line": 1397,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1420,
              "column": 6
            },
            "end": {
              "line": 1428,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1535,
              "column": 6
            },
            "end": {
              "line": 1540,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1561,
              "column": 6
            },
            "end": {
              "line": 1572,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1586,
              "column": 6
            },
            "end": {
              "line": 1599,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 558,
              "column": 6
            },
            "end": {
              "line": 567,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1628,
              "column": 6
            },
            "end": {
              "line": 1639,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1726,
              "column": 6
            },
            "end": {
              "line": 1736,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1747,
              "column": 6
            },
            "end": {
              "line": 1752,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1764,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1801,
              "column": 6
            },
            "end": {
              "line": 1805,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1826,
              "column": 6
            },
            "end": {
              "line": 1828,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1851,
              "column": 6
            },
            "end": {
              "line": 1861,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1877,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1929,
              "column": 6
            },
            "end": {
              "line": 1966,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1981,
              "column": 6
            },
            "end": {
              "line": 1990,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2006,
              "column": 6
            },
            "end": {
              "line": 2014,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2029,
              "column": 6
            },
            "end": {
              "line": 2046,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2059,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2080,
              "column": 6
            },
            "end": {
              "line": 2090,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string|function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2103,
              "column": 6
            },
            "end": {
              "line": 2109,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2120,
              "column": 6
            },
            "end": {
              "line": 2128,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2139,
              "column": 6
            },
            "end": {
              "line": 2152,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2166,
              "column": 6
            },
            "end": {
              "line": 2172,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2349,
              "column": 6
            },
            "end": {
              "line": 2372,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2451,
              "column": 6
            },
            "end": {
              "line": 2472,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Called when the element is removed from a document",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 215,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 581,
              "column": 6
            },
            "end": {
              "line": 597,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 617,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 638,
              "column": 6
            },
            "end": {
              "line": 643,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_freezeColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_unfreezeColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_hideColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 116,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_groupByColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 8
            },
            "end": {
              "line": 128,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_ungroup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 8
            },
            "end": {
              "line": 140,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_setDropdownItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 8
            },
            "end": {
<<<<<<< HEAD
              "line": 207,
=======
              "line": 209,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_dropdownOpenedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 209,
              "column": 8
            },
            "end": {
              "line": 228,
=======
              "line": 211,
              "column": 8
            },
            "end": {
              "line": 230,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dropdownOpened"
            }
          ]
        },
        {
          "name": "_dropdownItemClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 230,
              "column": 8
            },
            "end": {
              "line": 236,
=======
              "line": 232,
              "column": 8
            },
            "end": {
              "line": 238,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_dropdownClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 238,
              "column": 8
            },
            "end": {
              "line": 241,
=======
              "line": 240,
              "column": 8
            },
            "end": {
              "line": 243,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_canBeHidden",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 8
            },
            "end": {
              "line": 254,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 654,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2491,
              "column": 6
            },
            "end": {
              "line": 2505,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2578,
              "column": 6
            },
            "end": {
              "line": 2588,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2526,
              "column": 6
            },
            "end": {
              "line": 2562,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 388,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createProperties",
          "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 325,
              "column": 7
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "attributeNameForProperty",
          "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property to convert"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Attribute name corresponding to the given property."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "typeForProperty",
          "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 180,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Type to which to deserialize attribute"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2212,
              "column": 6
            },
            "end": {
              "line": 2214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2226,
              "column": 6
            },
            "end": {
              "line": 2228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string|function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2243,
              "column": 6
            },
            "end": {
              "line": 2245,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating"
            }
          ],
          "return": {
            "type": "void",
            "desc": "whether method names should be included as a dependency to the effect."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2275,
              "column": 6
            },
            "end": {
              "line": 2277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2287,
              "column": 6
            },
            "end": {
              "line": 2289,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2305,
              "column": 6
            },
            "end": {
              "line": 2307,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2321,
              "column": 6
            },
            "end": {
              "line": 2323,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2387,
              "column": 6
            },
            "end": {
              "line": 2393,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2623,
              "column": 6
            },
            "end": {
              "line": 2688,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2704,
              "column": 6
            },
            "end": {
              "line": 2721,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "_finalizeClass",
          "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 293,
              "column": 5
            },
            "end": {
              "line": 316,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "createObservers",
          "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 342,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "observers",
              "type": "Object",
              "description": "Array of observer descriptors for\n  this class"
            },
            {
              "name": "dynamicFns",
              "type": "Object",
              "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for a style element in the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 490,
              "column": 6
            },
            "end": {
              "line": 492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string",
              "description": "Text containing styling to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The processed CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 503,
              "column": 6
            },
            "end": {
              "line": 514,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 22,
          "column": 6
        },
        "end": {
<<<<<<< HEAD
          "line": 242,
=======
          "line": 255,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "DataGridHeaderCellElement",
      "attributes": [
        {
          "name": "dropdown-opened",
          "description": "If true, opens nested dropdown.",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 12
            },
            "end": {
              "line": 35,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "group-by-column-allowed",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 12
            },
            "end": {
              "line": 40,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "localize",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 12
            },
            "end": {
              "line": 60,
              "column": 30
            }
          },
          "metadata": {},
          "type": "Function"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "px-data-grid-header-cell.html",
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 17
            }
          }
        }
      ],
      "tagname": "px-data-grid-header-cell"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-data-grid-sorter.html",
      "properties": [
        {
          "name": "path",
          "type": "string",
          "description": "JS Path of the property in the item used for sorting the data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 12
            },
            "end": {
              "line": 30,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "direction",
          "type": "string",
          "description": "How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 12
            },
            "end": {
              "line": 42,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_order",
          "type": "number",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 12
            },
            "end": {
              "line": 47,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "null"
        },
        {
          "name": "_isConnected",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 12
            },
            "end": {
              "line": 52,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 8
            },
            "end": {
              "line": 66,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 8
            },
            "end": {
              "line": 71,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 76,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_pathOrDirectionChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 93,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path"
            },
            {
              "name": "direction"
            },
            {
              "name": "isConnected"
            }
          ]
        },
        {
          "name": "_getDisplayOrder",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 8
            },
            "end": {
              "line": 97,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "order"
            }
          ]
        },
        {
          "name": "_getDirectionIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 99,
              "column": 8
            },
            "end": {
              "line": 107,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "direction"
            }
          ]
        },
        {
          "name": "_isOrdered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 111,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_directionOrOrderChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 8
            },
            "end": {
              "line": 145,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "direction"
            },
            {
              "name": "order"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 6
        },
        "end": {
          "line": 146,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "GridSorterElement",
      "attributes": [
        {
          "name": "path",
          "description": "JS Path of the property in the item used for sorting the data.",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 12
            },
            "end": {
              "line": 30,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "direction",
          "description": "How to sort the data.\nPossible values are `asc` to use an ascending algorithm, `desc` to sort the data in\ndescending direction, or `null` for not sorting the data.",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 12
            },
            "end": {
              "line": 42,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "direction-changed",
          "description": "Fired when the `direction` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "",
          "range": {
            "file": "px-data-grid-sorter.html",
            "start": {
              "line": 10,
              "column": 6
            },
            "end": {
              "line": 10,
              "column": 19
            }
          }
        }
      ],
      "tagname": "px-data-grid-sorter"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-data-grid-action-buttons.html",
      "properties": [
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1139,
              "column": 8
            },
            "end": {
              "line": 1139,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1141,
              "column": 8
            },
            "end": {
              "line": 1141,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1143,
              "column": 8
            },
            "end": {
              "line": 1143,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1145,
              "column": 8
            },
            "end": {
              "line": 1145,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1147,
              "column": 8
            },
            "end": {
              "line": 1147,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1149,
              "column": 8
            },
            "end": {
              "line": 1149,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1151,
              "column": 8
            },
            "end": {
              "line": 1151,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1153,
              "column": 8
            },
            "end": {
              "line": 1153,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1155,
              "column": 8
            },
            "end": {
              "line": 1155,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1157,
              "column": 8
            },
            "end": {
              "line": 1157,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1159,
              "column": 8
            },
            "end": {
              "line": 1159,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1161,
              "column": 8
            },
            "end": {
              "line": 1161,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1163,
              "column": 8
            },
            "end": {
              "line": 1163,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1165,
              "column": 8
            },
            "end": {
              "line": 1165,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1167,
              "column": 8
            },
            "end": {
              "line": 1167,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1169,
              "column": 8
            },
            "end": {
              "line": 1169,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1171,
              "column": 8
            },
            "end": {
              "line": 1171,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1173,
              "column": 8
            },
            "end": {
              "line": 1173,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1175,
              "column": 8
            },
            "end": {
              "line": 1175,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 421,
              "column": 8
            },
            "end": {
              "line": 421,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 423,
              "column": 8
            },
            "end": {
              "line": 423,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 425,
              "column": 8
            },
            "end": {
              "line": 425,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 427,
              "column": 8
            },
            "end": {
              "line": 427,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 429,
              "column": 8
            },
            "end": {
              "line": 429,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Element>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 431,
              "column": 8
            },
            "end": {
              "line": 431,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "edit",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 12
            },
            "end": {
              "line": 34,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "item",
          "type": "Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 12
            },
            "end": {
              "line": 35,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "offerEdit",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 12
            },
            "end": {
              "line": 40,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "offerActions",
          "type": "boolean",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 12
            },
            "end": {
              "line": 45,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "itemActions",
          "type": "Array",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 12
            },
            "end": {
              "line": 50,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2415,
              "column": 6
            },
            "end": {
              "line": 2440,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 452,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 467,
              "column": 6
            },
            "end": {
              "line": 469,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 481,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_addPropertyToAttributeMap",
          "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 132,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_definePropertyAccessor",
          "description": "Defines a property accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 140,
              "column": 9
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 540,
              "column": 6
            },
            "end": {
              "line": 546,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 446,
              "column": 6
            },
            "end": {
              "line": 480,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 224,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of property values that were overwritten\n  when creating property accessors."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setProperty",
          "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 235,
              "column": 8
            },
            "end": {
              "line": 239,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_getProperty",
          "description": "Returns the value for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value for the given property"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setPendingProperty",
          "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 264,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "ext",
              "type": "boolean=",
              "description": "Not used here; affordance for closure"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_invalidateProperties",
          "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 290,
              "column": 8
            },
            "end": {
              "line": 300,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 313,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 333,
              "column": 8
            },
            "end": {
              "line": 339,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertiesChanged",
          "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "!Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "!Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 374,
              "column": 8
            },
            "end": {
              "line": 381,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 393,
              "column": 8
            },
            "end": {
              "line": 400,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 414,
              "column": 8
            },
            "end": {
              "line": 421,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 433,
              "column": 8
            },
            "end": {
              "line": 439,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect to."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 454,
              "column": 8
            },
            "end": {
              "line": 461,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 474,
              "column": 8
            },
            "end": {
              "line": 481,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided\nproperty  value."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 495,
              "column": 8
            },
            "end": {
              "line": 504,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1209,
              "column": 6
            },
            "end": {
              "line": 1213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 310,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1247,
              "column": 6
            },
            "end": {
              "line": 1255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1265,
              "column": 6
            },
            "end": {
              "line": 1271,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1282,
              "column": 6
            },
            "end": {
              "line": 1285,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1295,
              "column": 6
            },
            "end": {
              "line": 1297,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1307,
              "column": 6
            },
            "end": {
              "line": 1309,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1319,
              "column": 6
            },
            "end": {
              "line": 1321,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1331,
              "column": 6
            },
            "end": {
              "line": 1333,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1365,
              "column": 6
            },
            "end": {
              "line": 1397,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1420,
              "column": 6
            },
            "end": {
              "line": 1428,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1535,
              "column": 6
            },
            "end": {
              "line": 1540,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1561,
              "column": 6
            },
            "end": {
              "line": 1572,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1586,
              "column": 6
            },
            "end": {
              "line": 1599,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 558,
              "column": 6
            },
            "end": {
              "line": 567,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1628,
              "column": 6
            },
            "end": {
              "line": 1639,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1726,
              "column": 6
            },
            "end": {
              "line": 1736,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1747,
              "column": 6
            },
            "end": {
              "line": 1752,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1764,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1801,
              "column": 6
            },
            "end": {
              "line": 1805,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1826,
              "column": 6
            },
            "end": {
              "line": 1828,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1851,
              "column": 6
            },
            "end": {
              "line": 1861,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1877,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1929,
              "column": 6
            },
            "end": {
              "line": 1966,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1981,
              "column": 6
            },
            "end": {
              "line": 1990,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2006,
              "column": 6
            },
            "end": {
              "line": 2014,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2029,
              "column": 6
            },
            "end": {
              "line": 2046,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2059,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2080,
              "column": 6
            },
            "end": {
              "line": 2090,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string|function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2103,
              "column": 6
            },
            "end": {
              "line": 2109,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2120,
              "column": 6
            },
            "end": {
              "line": 2128,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2139,
              "column": 6
            },
            "end": {
              "line": 2152,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2166,
              "column": 6
            },
            "end": {
              "line": 2172,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2349,
              "column": 6
            },
            "end": {
              "line": 2372,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2451,
              "column": 6
            },
            "end": {
              "line": 2472,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Called when the element is removed from a document",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 215,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 581,
              "column": 6
            },
            "end": {
              "line": 597,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 617,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 638,
              "column": 6
            },
            "end": {
              "line": 643,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_convertActions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "actions"
            }
          ]
        },
        {
          "name": "_handleEdit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_dropdownItemClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 8
            },
            "end": {
              "line": 99,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_dropdownClick",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 654,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2491,
              "column": 6
            },
            "end": {
              "line": 2505,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2578,
              "column": 6
            },
            "end": {
              "line": 2588,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2526,
              "column": 6
            },
            "end": {
              "line": 2562,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 388,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createProperties",
          "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 325,
              "column": 7
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "attributeNameForProperty",
          "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property to convert"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Attribute name corresponding to the given property."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "typeForProperty",
          "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 180,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Type to which to deserialize attribute"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2212,
              "column": 6
            },
            "end": {
              "line": 2214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2226,
              "column": 6
            },
            "end": {
              "line": 2228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string|function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2243,
              "column": 6
            },
            "end": {
              "line": 2245,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating"
            }
          ],
          "return": {
            "type": "void",
            "desc": "whether method names should be included as a dependency to the effect."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2275,
              "column": 6
            },
            "end": {
              "line": 2277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2287,
              "column": 6
            },
            "end": {
              "line": 2289,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2305,
              "column": 6
            },
            "end": {
              "line": 2307,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2321,
              "column": 6
            },
            "end": {
              "line": 2323,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2387,
              "column": 6
            },
            "end": {
              "line": 2393,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2623,
              "column": 6
            },
            "end": {
              "line": 2688,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2704,
              "column": 6
            },
            "end": {
              "line": 2721,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "_finalizeClass",
          "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 293,
              "column": 5
            },
            "end": {
              "line": 316,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "createObservers",
          "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 342,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "observers",
              "type": "Object",
              "description": "Array of observer descriptors for\n  this class"
            },
            {
              "name": "dynamicFns",
              "type": "Object",
              "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for a style element in the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 490,
              "column": 6
            },
            "end": {
              "line": 492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string",
              "description": "Text containing styling to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The processed CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 503,
              "column": 6
            },
            "end": {
              "line": 514,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 6
        },
        "end": {
          "line": 105,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "DataGridActionButtonsElement",
      "attributes": [
        {
          "name": "edit",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 12
            },
            "end": {
              "line": 34,
              "column": 26
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 12
            },
            "end": {
              "line": 35,
              "column": 24
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "offer-edit",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 12
            },
            "end": {
              "line": 40,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "offer-actions",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 12
            },
            "end": {
              "line": 45,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "item-actions",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 12
            },
            "end": {
              "line": 50,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-data-grid-action-buttons"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-data-grid-edit-buttons.html",
      "properties": [
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1139,
              "column": 8
            },
            "end": {
              "line": 1139,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1141,
              "column": 8
            },
            "end": {
              "line": 1141,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1143,
              "column": 8
            },
            "end": {
              "line": 1143,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1145,
              "column": 8
            },
            "end": {
              "line": 1145,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1147,
              "column": 8
            },
            "end": {
              "line": 1147,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1149,
              "column": 8
            },
            "end": {
              "line": 1149,
              "column": 35
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1151,
              "column": 8
            },
            "end": {
              "line": 1151,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1153,
              "column": 8
            },
            "end": {
              "line": 1153,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1155,
              "column": 8
            },
            "end": {
              "line": 1155,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1157,
              "column": 8
            },
            "end": {
              "line": 1157,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1159,
              "column": 8
            },
            "end": {
              "line": 1159,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1161,
              "column": 8
            },
            "end": {
              "line": 1161,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1163,
              "column": 8
            },
            "end": {
              "line": 1163,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1165,
              "column": 8
            },
            "end": {
              "line": 1165,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1167,
              "column": 8
            },
            "end": {
              "line": 1167,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1169,
              "column": 8
            },
            "end": {
              "line": 1169,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1171,
              "column": 8
            },
            "end": {
              "line": 1171,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1173,
              "column": 8
            },
            "end": {
              "line": 1173,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1175,
              "column": 8
            },
            "end": {
              "line": 1175,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 421,
              "column": 8
            },
            "end": {
              "line": 421,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 423,
              "column": 8
            },
            "end": {
              "line": 423,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 425,
              "column": 8
            },
            "end": {
              "line": 425,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 427,
              "column": 8
            },
            "end": {
              "line": 427,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate|HTMLElement|ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 429,
              "column": 8
            },
            "end": {
              "line": 429,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Element>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 431,
              "column": 8
            },
            "end": {
              "line": 431,
              "column": 15
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "save",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 12
            },
            "end": {
              "line": 25,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "cancel",
          "type": "Function",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 12
            },
            "end": {
              "line": 26,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2415,
              "column": 6
            },
            "end": {
              "line": 2440,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 452,
              "column": 6
            },
            "end": {
              "line": 457,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 467,
              "column": 6
            },
            "end": {
              "line": 469,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 479,
              "column": 6
            },
            "end": {
              "line": 481,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 106,
              "column": 8
            },
            "end": {
              "line": 115,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_addPropertyToAttributeMap",
          "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 124,
              "column": 8
            },
            "end": {
              "line": 132,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            }
          ],
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_definePropertyAccessor",
          "description": "Defines a property accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 140,
              "column": 9
            },
            "end": {
              "line": 153,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 540,
              "column": 6
            },
            "end": {
              "line": 546,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `Polymer.PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 446,
              "column": 6
            },
            "end": {
              "line": 480,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 222,
              "column": 8
            },
            "end": {
              "line": 224,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of property values that were overwritten\n  when creating property accessors."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setProperty",
          "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 235,
              "column": 8
            },
            "end": {
              "line": 239,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_getProperty",
          "description": "Returns the value for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 247,
              "column": 8
            },
            "end": {
              "line": 249,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value for the given property"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_setPendingProperty",
          "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 264,
              "column": 8
            },
            "end": {
              "line": 280,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "ext",
              "type": "boolean=",
              "description": "Not used here; affordance for closure"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_invalidateProperties",
          "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 290,
              "column": 8
            },
            "end": {
              "line": 300,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 313,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 333,
              "column": 8
            },
            "end": {
              "line": 339,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertiesChanged",
          "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 353,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "!Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "!Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 374,
              "column": 8
            },
            "end": {
              "line": 381,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 393,
              "column": 8
            },
            "end": {
              "line": 400,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 414,
              "column": 8
            },
            "end": {
              "line": 421,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 433,
              "column": 8
            },
            "end": {
              "line": 439,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect to."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 454,
              "column": 8
            },
            "end": {
              "line": 461,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 474,
              "column": 8
            },
            "end": {
              "line": 481,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string|undefined)",
            "desc": "String serialized from the provided\nproperty  value."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 495,
              "column": 8
            },
            "end": {
              "line": 504,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `Polymer.PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1209,
              "column": 6
            },
            "end": {
              "line": 1213,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 192,
              "column": 6
            },
            "end": {
              "line": 197,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 299,
              "column": 6
            },
            "end": {
              "line": 301,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 310,
              "column": 6
            },
            "end": {
              "line": 312,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1247,
              "column": 6
            },
            "end": {
              "line": 1255,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1265,
              "column": 6
            },
            "end": {
              "line": 1271,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1282,
              "column": 6
            },
            "end": {
              "line": 1285,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1295,
              "column": 6
            },
            "end": {
              "line": 1297,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1307,
              "column": 6
            },
            "end": {
              "line": 1309,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to attribute\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1319,
              "column": 6
            },
            "end": {
              "line": 1321,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1331,
              "column": 6
            },
            "end": {
              "line": 1333,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this type"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1365,
              "column": 6
            },
            "end": {
              "line": 1397,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(number|string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1420,
              "column": 6
            },
            "end": {
              "line": 1428,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1535,
              "column": 6
            },
            "end": {
              "line": 1540,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1561,
              "column": 6
            },
            "end": {
              "line": 1572,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1586,
              "column": 6
            },
            "end": {
              "line": 1599,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 558,
              "column": 6
            },
            "end": {
              "line": 567,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1628,
              "column": 6
            },
            "end": {
              "line": 1639,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1726,
              "column": 6
            },
            "end": {
              "line": 1736,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1747,
              "column": 6
            },
            "end": {
              "line": 1752,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Source path to link."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1764,
              "column": 6
            },
            "end": {
              "line": 1769,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Target path to unlink."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1801,
              "column": 6
            },
            "end": {
              "line": 1805,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1826,
              "column": 6
            },
            "end": {
              "line": 1828,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1851,
              "column": 6
            },
            "end": {
              "line": 1861,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1877,
              "column": 6
            },
            "end": {
              "line": 1886,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1901,
              "column": 6
            },
            "end": {
              "line": 1910,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1929,
              "column": 6
            },
            "end": {
              "line": 1966,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 1981,
              "column": 6
            },
            "end": {
              "line": 1990,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2006,
              "column": 6
            },
            "end": {
              "line": 2014,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string|!Array.<(string|number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2029,
              "column": 6
            },
            "end": {
              "line": 2046,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2059,
              "column": 6
            },
            "end": {
              "line": 2066,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2080,
              "column": 6
            },
            "end": {
              "line": 2090,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string|function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2103,
              "column": 6
            },
            "end": {
              "line": 2109,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2120,
              "column": 6
            },
            "end": {
              "line": 2128,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2139,
              "column": 6
            },
            "end": {
              "line": 2152,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2166,
              "column": 6
            },
            "end": {
              "line": 2172,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2349,
              "column": 6
            },
            "end": {
              "line": 2372,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2451,
              "column": 6
            },
            "end": {
              "line": 2472,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 527,
              "column": 6
            },
            "end": {
              "line": 532,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Called when the element is removed from a document",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 215,
              "column": 6
            },
            "end": {
              "line": 219,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 581,
              "column": 6
            },
            "end": {
              "line": 597,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 617,
              "column": 6
            },
            "end": {
              "line": 621,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 638,
              "column": 6
            },
            "end": {
              "line": 643,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_handleSave",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 34,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_handleCancel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyAccessors` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 654,
              "column": 6
            },
            "end": {
              "line": 657,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template"
            },
            {
              "name": "templateInfo"
            },
            {
              "name": "nodeInfo"
            }
          ],
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2491,
              "column": 6
            },
            "end": {
              "line": 2505,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 258,
              "column": 6
            },
            "end": {
              "line": 295,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2578,
              "column": 6
            },
            "end": {
              "line": 2588,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 342,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2526,
              "column": 6
            },
            "end": {
              "line": 2562,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/template-stamp.html",
            "start": {
              "line": 388,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "Polymer.TemplateStamp"
        },
        {
          "name": "createProperties",
          "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 325,
              "column": 7
            },
            "end": {
              "line": 329,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "attributeNameForProperty",
          "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-changed.html",
            "start": {
              "line": 77,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property to convert"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Attribute name corresponding to the given property."
          },
          "inheritedFrom": "Polymer.PropertiesChanged"
        },
        {
          "name": "typeForProperty",
          "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 180,
              "column": 6
            },
            "end": {
              "line": 183,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Type to which to deserialize attribute"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-accessors.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 133,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2212,
              "column": 6
            },
            "end": {
              "line": 2214,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2226,
              "column": 6
            },
            "end": {
              "line": 2228,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string|function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2243,
              "column": 6
            },
            "end": {
              "line": 2245,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating"
            }
          ],
          "return": {
            "type": "void",
            "desc": "whether method names should be included as a dependency to the effect."
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2255,
              "column": 6
            },
            "end": {
              "line": 2257,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2275,
              "column": 6
            },
            "end": {
              "line": 2277,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2287,
              "column": 6
            },
            "end": {
              "line": 2289,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2305,
              "column": 6
            },
            "end": {
              "line": 2307,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean|Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2321,
              "column": 6
            },
            "end": {
              "line": 2323,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Adds a property effect to the given template metadata, which is run\nat the \"propagate\" stage of `_propertiesChanged` when the template\nhas been bound to the element via `_bindTemplate`.\n\nThe `effect` object should match the format in `_addPropertyEffect`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2387,
              "column": 6
            },
            "end": {
              "line": 2393,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2623,
              "column": 6
            },
            "end": {
              "line": 2688,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/property-effects.html",
            "start": {
              "line": 2704,
              "column": 6
            },
            "end": {
              "line": 2721,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "this",
              "description": "Element that should be used as scope for\n  binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "Polymer.PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/properties-mixin.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 137,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.PropertiesMixin"
        },
        {
          "name": "_finalizeClass",
          "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 293,
              "column": 5
            },
            "end": {
              "line": 316,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "createObservers",
          "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 342,
              "column": 6
            },
            "end": {
              "line": 347,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "observers",
              "type": "Object",
              "description": "Array of observer descriptors for\n  this class"
            },
            {
              "name": "dynamicFns",
              "type": "Object",
              "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for a style element in the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 490,
              "column": 6
            },
            "end": {
              "line": 492,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string",
              "description": "Text containing styling to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The processed CSS text"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components/polymer/lib/mixins/element-mixin.html",
            "start": {
              "line": 503,
              "column": 6
            },
            "end": {
              "line": 514,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Polymer.ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 6
        },
        "end": {
          "line": 41,
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "DataGridEditButtonsElement",
      "attributes": [
        {
          "name": "save",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 12
            },
            "end": {
              "line": 25,
              "column": 26
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "cancel",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 26,
              "column": 12
            },
            "end": {
              "line": 26,
              "column": 28
            }
          },
          "metadata": {},
          "type": "Function"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-data-grid-edit-buttons"
    },
    {
      "description": "",
      "summary": "",
      "path": "px-data-grid.html",
      "properties": [
        {
          "name": "filterable",
          "type": "boolean",
          "description": "If true, turns on advanced filtering.",
          "privacy": "public",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 13,
              "column": 8
            },
            "end": {
              "line": 16,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_filters",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 18,
              "column": 8
            },
            "end": {
              "line": 20,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_initialFilterState",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 25,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_filterHighlights",
          "type": "Array",
          "description": "Array of highlights from px-data-grid-filter component.",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 33,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]",
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "tableData",
          "type": "Array",
          "description": "Data for the table to display.\n\nExpected data format is a JSON array of objects. Each object in the array represents a row in the table.\n\nEach item in an object will be displayed as a separate column, unless px-data-table-columns are\ndefined to limit which columns are displayed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 12
            },
            "end": {
              "line": 202,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          }
        },
        {
          "name": "hideSelectionColumn",
          "type": "boolean",
          "description": "If true, hides the column with checkboxes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 12
            },
            "end": {
              "line": 210,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "selectedItems",
          "type": "Array",
          "description": "An array that contains the selected items.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 12
            },
            "end": {
              "line": 219,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "size",
          "type": "number",
          "description": "The total number of items",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 12
            },
            "end": {
              "line": 227,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "pageSize",
          "type": "number",
          "description": "Number of items fetched at a time from the dataprovider.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 12
            },
            "end": {
              "line": 235,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "multiSort",
          "type": "boolean",
          "description": "When `true`, user can sort by multiple columns",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 12
            },
            "end": {
              "line": 243,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "selectionMode",
          "type": "string",
          "description": "Current selection mode of grid. Accepts values 'none', 'single' and 'multi'.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 12
            },
            "end": {
              "line": 252,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selectionModeChanged\""
            }
          },
          "defaultValue": "\"none\""
        },
        {
          "name": "activeItem",
          "type": "Object",
          "description": "The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 12
            },
            "end": {
              "line": 262,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "notify": true
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "resizable",
          "type": "boolean",
          "description": "When `true`, user can resize columns",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 12
            },
            "end": {
              "line": 270,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "editable",
          "type": "boolean",
          "description": "When `true`, user can edit data",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 12
            },
            "end": {
              "line": 278,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "columnReorderingAllowed",
          "type": "boolean",
          "description": "Set to true to allow column reordering. Notice that some states will disable\nreordering (eg. grouped by value).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 12
            },
            "end": {
              "line": 286,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "expandedItems",
          "type": "Array",
          "description": "An array containing references to expanded items.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 12
            },
            "end": {
              "line": 294,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "rowDetails",
          "type": "boolean",
          "description": "Set to true to enable a togglable row details container. This container\nis hidden by default, but can be opened by clicking the chevron icon to left\nof the row.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 12
            },
            "end": {
              "line": 305,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_onRowDetailsChange\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hideActionMenu",
          "type": "boolean",
          "description": "Define if table action menu should be hidden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 310,
              "column": 12
            },
            "end": {
              "line": 313,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "columns",
          "type": "Array",
          "description": "Sets the columns the grid should render. If no columns are passed, the grid\ngenerates columns from the `tableData` passed in. Columns are rendered\nin the same order as the array.\n\nEach column can have the following configurations. Only name and path\nare required, all others are optional:\n\n  * `{string} id='column.path[column.type]'` - Unique identificator of the column.\n    By default, px-data-grid will automatically generate it from `column.path` and `column.type`.\n    There can't be 2 columns with the same id.\n    Also, note, that `-any-` is reserved keyword for `id`, you should not use it.\n\n  * `{string} name` - Name, that is displayed in column header.\n\n  * `{string} path` - Column's path indicates a key, which is used to get data from data object.\n\n  * `{string} type=('string'|'number'|'date')` - Type of column.\n    Influences on advanced filter's UI. Different selectors will be displayed for different types.\n\n  * `{string} renderer` - You can define your own renderer element to display and edit cell data in your own way.\n    For more information, please check sample renderers, e.g. `px-data-grid-number-renderer`, `px-data-grid-date-renderer`.\n\n  * `{object} rendererConfig` - An arbitrary object that can be used to pass down options to the chosen renderer.\n     See `px-data-grid-date-renderer` for an example of a renderer using this object for its four configurable properties\n  * `{number} minBound` - Used to define minimum bound of a number in advanced filter's slider.\n    Note, that this property works with `column.type === 'number'` only.\n\n  * `{number} maxBound` - Used to define maximum bound of a number in advanced filter's slider.\n    Note, that this property works with `column.type === 'number'` only.\n    If both minBound and maxBound properties are defined, advanced filter will display slider instead of dropdown.\n\n  * `{boolean} hidden=false` - Indicates whether a column is hidden.\n\n  * `{boolean} frozen=false` - Indicates whether a column is frozen.\n\n  * `{boolean} required=false` - This property is used in renderers to validate data when user edits it.\n\n  * `{number} flexGrow=1` - Indicates whether a column should grow, equialent to the CSS flex-grow property.\n\nExample format for a single column with all configurations used:\n\n```javascript\n{\n  id: 'first[string]',\n  name: 'First Name',\n  path: 'first',\n  type: 'string',\n  renderer: 'px-data-grid-string-renderer',\n  rendererConfig: {\n    customInfo: 'some info',\n    customInfo2: 42\n  },\n  minBound: 1,\n  maxBound: 10,\n  hidden: false,\n  frozen: false,\n  required: false,\n  flexGrow: 1\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 377,
              "column": 12
            },
            "end": {
              "line": 381,
=======
              "line": 371,
              "column": 12
            },
            "end": {
              "line": 375,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_columnsChanged\""
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "_lastColumnsReceived",
          "type": "Array",
          "description": "Copy of last columns value received, to be used with reset layout",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 386,
              "column": 12
            },
            "end": {
              "line": 389,
=======
              "line": 380,
              "column": 12
            },
            "end": {
              "line": 383,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_actionMenuContent",
          "type": "Array",
          "description": "Content of action menu",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 394,
              "column": 12
            },
            "end": {
              "line": 396,
=======
              "line": 388,
              "column": 12
            },
            "end": {
              "line": 390,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "language",
          "type": "string",
          "description": "A valid IETF language tag as a string that `app-localize-behavior` will\nuse to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 405,
              "column": 12
            },
            "end": {
              "line": 408,
=======
              "line": 399,
              "column": 12
            },
            "end": {
              "line": 402,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"en\""
        },
        {
          "name": "useKeyIfMissing",
          "type": "boolean",
          "description": "Use the key for localization if value for that language is missing.\nShould always be true for Predix components.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 414,
              "column": 12
            },
            "end": {
              "line": 417,
=======
              "line": 408,
              "column": 12
            },
            "end": {
              "line": 411,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "resources",
          "type": "Object",
          "description": "Library object of hardcoded strings used in this application.\nUsed by `app-localize-behavior` in conjunction with `language`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 423,
              "column": 12
            },
            "end": {
              "line": 447,
=======
              "line": 417,
              "column": 12
            },
            "end": {
              "line": 441,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "{\"en\":{\"Actions\":\"Actions\",\"Freeze column\":\"Freeze Column\",\"Unfreeze column\":\"Unfreeze Column\",\"Group by column\":\"Group by Column\",\"Ungroup\":\"Ungroup\",\"Hide column\":\"Hide Column\"},\"fr\":{\"Actions\":\"Actions\",\"Value is required\":\"Pakollinen arvo\"},\"fi\":{\"Actions\":\"Toiminnot\",\"Hide column\":\"Piilota sarake\"}}"
        },
        {
          "name": "tableActions",
          "type": "Array",
          "description": "All custom table actions shown before columns. Array should contain objects\nwith name (String, shown to user) and id (String, given back in event).\nWhen user selects these actions table-action event will be emitted, with id of\naction at event.detail.id\n```\n[\n  {\n    name: 'Export CSV',\n    id: 'CSV'\n  }\n  {\n    name: 'Export Excel',\n    id: 'Excel'\n  }\n]\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 467,
              "column": 12
            },
            "end": {
              "line": 470,
=======
              "line": 461,
              "column": 12
            },
            "end": {
              "line": 464,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "itemActions",
          "type": "Array",
          "description": "All custom item actions shown on the data rows. Array should contain objects\nwith name (String, shown to user) and id (String, given back in event).\nWhen user selects these actions item-action event will be emitted, with id of\naction at event.detail.id\n```\n[\n  {\n    name: 'Add Row',\n    id: 'add'\n  }\n  {\n    name: 'Delete Row',\n    id: 'delete'\n  }\n]\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 490,
              "column": 12
            },
            "end": {
              "line": 493,
=======
              "line": 484,
              "column": 12
            },
            "end": {
              "line": 487,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "remoteDataProvider",
          "type": "Function",
          "description": "Function that provides items lazily. Receives arguments params, callback",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 498,
              "column": 12
            },
            "end": {
              "line": 501,
=======
              "line": 492,
              "column": 12
            },
            "end": {
              "line": 495,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_remoteDataProviderChanged\""
            }
          }
        },
        {
          "name": "_currentDataProvider",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 503,
              "column": 12
            },
            "end": {
              "line": 505,
=======
              "line": 497,
              "column": 12
            },
            "end": {
              "line": 499,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_expandableRows",
          "type": "boolean",
          "description": "If true, row-details template is provided and rows are expandable",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 510,
              "column": 12
            },
            "end": {
              "line": 513,
=======
              "line": 504,
              "column": 12
            },
            "end": {
              "line": 507,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "striped",
          "type": "boolean",
          "description": "If true, every other row in the table will appear with a background color to improve visual scanning.\nWhen grouped by column striping will be disabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 519,
              "column": 12
            },
            "end": {
              "line": 522,
=======
              "line": 513,
              "column": 12
            },
            "end": {
              "line": 516,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "ellipsis",
          "type": "boolean",
          "description": "If true sets all columns to use ellipsis when text overflows the column,\nenabling wrap mode while ellisis mode is enabled is an undefined state.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 522,
              "column": 12
            },
            "end": {
              "line": 526,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_ellipsisModeChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_loading",
          "type": "boolean",
          "description": "Shows if there is any pending request for remote data.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 527,
              "column": 12
            },
            "end": {
              "line": 531,
=======
              "line": 531,
              "column": 12
            },
            "end": {
              "line": 535,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_loadingChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_spinnerHidden",
          "type": "boolean",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 533,
              "column": 12
            },
            "end": {
              "line": 536,
=======
              "line": 537,
              "column": 12
            },
            "end": {
              "line": 540,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "loadingSpinnerDebounce",
          "type": "number",
          "description": "How many milliseconds before loading spinner will be shown",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 541,
              "column": 12
            },
            "end": {
              "line": 544,
=======
              "line": 545,
              "column": 12
            },
            "end": {
              "line": 548,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "500"
        },
        {
          "name": "autoFilter",
          "type": "boolean",
          "description": "To enable automatic filtering change property to true",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 549,
              "column": 12
            },
            "end": {
              "line": 552,
=======
              "line": 553,
              "column": 12
            },
            "end": {
              "line": 556,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "highlight",
          "type": "Array",
          "description": "Array of objects of conditions used to highlight specific columns.\nFormat:\n```javascript\n{\n  type: 'cell',\n  condition: (cellContent, column, item) => { return cellContent == 'John Doe' },\n},\n{\n  type: 'row',\n  condition: (cellContent, item) => { return cellContent[0] == 'a' },\n  color: '#a8a8a8'\n},\n{\n  type: 'column',\n  condition (column, item) => { return column.name == 'age' },\n  color: 'pink'\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 574,
              "column": 12
            },
            "end": {
              "line": 577,
=======
              "line": 578,
              "column": 12
            },
            "end": {
              "line": 581,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_highlightEntities",
          "type": "Array",
          "description": "Concatenated array from user's highlights and filter's",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 582,
              "column": 12
            },
            "end": {
              "line": 585,
=======
              "line": 586,
              "column": 12
            },
            "end": {
              "line": 589,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_hasLocalDataProvider",
          "type": "boolean",
          "description": "When true data provider is local, when false external (remote) and\nwhen undefined it defined yet.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 591,
              "column": 12
            },
            "end": {
              "line": 593,
=======
              "line": 595,
              "column": 12
            },
            "end": {
              "line": 597,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "defaultColumnWidth",
          "type": "string",
          "description": "Default column width if not defined, eg. '100px'. Notice that with not\nzero flex values this value behaves more as minimum width. See\ndefaultColumnFlexGrow property.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 598,
              "column": 12
            },
            "end": {
              "line": 601,
=======
              "line": 604,
              "column": 12
            },
            "end": {
              "line": 607,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"100px\""
        },
        {
          "name": "defaultColumnFlexGrow",
          "type": "number",
          "description": "Default column flex if not defined, eg. 1. Equialent to the CSS flex-grow\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 606,
              "column": 12
            },
            "end": {
              "line": 609,
=======
              "line": 613,
              "column": 12
            },
            "end": {
              "line": 616,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "_selectedActionItems",
          "type": "Array",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 611,
              "column": 12
            },
            "end": {
              "line": 614,
=======
              "line": 618,
              "column": 12
            },
            "end": {
              "line": 621,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_groupByColumn",
          "type": "Object",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 616,
              "column": 12
            },
            "end": {
              "line": 619,
=======
              "line": 623,
              "column": 12
            },
            "end": {
              "line": 626,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "gridHeight",
          "type": "string",
          "description": "Define height of grid. If 'auto' the height of grid will match with\nmatch with number of rows in grid. Undefined value and 'default'\nwill use default height. Any other value (eg. '400px') is given as\nCSS height value to the actual grid component inside px-data-grid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 627,
              "column": 12
            },
            "end": {
              "line": 631,
=======
              "line": 634,
              "column": 12
            },
            "end": {
              "line": 638,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_gridHeightChanged\""
            }
          }
        },
        {
          "name": "flexToSize",
          "type": "boolean",
          "description": "Sets the px-grid to a mode where it and its content will flex to size.\nBy default the  px-data-grid will take 100% of the available height, this\ncan be changed by defining the css variable: --px-data-grid-height",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 645,
              "column": 12
            },
            "end": {
              "line": 649,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "itemIdPath",
          "type": "string",
          "description": "Path to an item sub-property that identifies the item. This should be\ndefined in case of any editing, to allow grid to pair new version of\nitem with new. Path must point to unique identifier in data objects\nthat does not change (eg. 'id')",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 639,
              "column": 12
            },
            "end": {
              "line": 641,
=======
              "line": 657,
              "column": 12
            },
            "end": {
              "line": 659,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "offerFilterSaving",
          "type": "boolean",
          "description": "If filter saving options should offered to end user. If save is\nselected it will emit save-filters event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 647,
              "column": 12
            },
            "end": {
              "line": 650,
=======
              "line": 665,
              "column": 12
            },
            "end": {
              "line": 668,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "allowSortBySelection",
          "type": "boolean",
          "description": "If user is allowed to sort by selection",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 655,
              "column": 12
            },
            "end": {
              "line": 658,
=======
              "line": 673,
              "column": 12
            },
            "end": {
              "line": 676,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "instantSortWhenSelection",
          "type": "boolean",
          "description": "If enabled in multi selection and sort by selection mode any\nchanges to selection will cause instant re-sort.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 664,
              "column": 12
            },
            "end": {
              "line": 667,
=======
              "line": 682,
              "column": 12
            },
            "end": {
              "line": 685,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false"
        },
        {
          "name": "compactAdvancedFilterDialog",
          "type": "boolean",
          "description": "If true advanced filter dialog will be rendered in space saving\nmode (eg. reuseable headers).",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 672,
              "column": 12
            },
            "end": {
              "line": 675,
=======
              "line": 690,
              "column": 12
            },
            "end": {
              "line": 693,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "true"
        },
        {
          "name": "_editingItem",
          "type": "Object",
          "description": "Stores item, that is currently in edit mode.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 680,
              "column": 12
            },
            "end": {
              "line": 684,
=======
              "line": 698,
              "column": 12
            },
            "end": {
              "line": 702,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editingItemObserver\""
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_editingRenderers",
          "type": "Array",
          "description": "Stores all renderer elements for item, that is currently in edit mode.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 689,
              "column": 12
            },
            "end": {
              "line": 692,
=======
              "line": 707,
              "column": 12
            },
            "end": {
              "line": 710,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "[]"
        },
        {
          "name": "_boundedLocalize",
          "type": "Function",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 694,
              "column": 12
            },
            "end": {
              "line": 694,
=======
              "line": 712,
              "column": 12
            },
            "end": {
              "line": 712,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 38
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_autoFilterValue",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 696,
              "column": 12
            },
            "end": {
              "line": 698,
=======
              "line": 714,
              "column": 12
            },
            "end": {
              "line": 716,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {
            "polymer": {}
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 755,
              "column": 8
            },
            "end": {
              "line": 801,
=======
              "line": 773,
              "column": 8
            },
            "end": {
              "line": 817,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_escapeRegExp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 68,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_isStringMatches",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 70,
              "column": 4
            },
            "end": {
              "line": 96,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_isDateMatches",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_isNumberMatches",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 112,
              "column": 4
            },
            "end": {
              "line": 147,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_matchesFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 149,
              "column": 4
            },
            "end": {
              "line": 159,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "column"
            },
            {
              "name": "entity"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_applyCustomFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 161,
              "column": 4
            },
            "end": {
              "line": 210,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "columns"
            },
            {
              "name": "filters"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_constructHighilightCondition",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 212,
              "column": 4
            },
            "end": {
              "line": 235,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "appliableFilters"
            },
            {
              "name": "columns"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "_filtersObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 237,
              "column": 4
            },
            "end": {
              "line": 276,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filters"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "applyFilters",
          "description": "This method allows to pass filters and save them as default filter state.\nThis means that after clicking \"Reset\" in filters modal filters will return to this state.\nFormat of input parameter for column.type === 'string':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'first[string]',\n       active: true,\n       pattern: 'equals',\n       query: 'Wong'\n    }\n  ]\n}]\n```\nPattern can be one of `['equals', 'contains', 'starts_with', 'ends_with', 'wildcard']`.\n\nFormat for column.type === 'date':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'birth_date[date]',\n       active: true,\n       dateFrom: '1994-11-12',\n       dateTo: '1994-11-12'\n    }\n  ]\n}]\n```\n\nFormat for column.type === 'number':\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'age[number]',\n       active: true,\n       condition: 'equals',\n       value: 1\n    }\n  ]\n}]\n```\n\nCondition can be one of `['equals', 'not_equal', 'greater_than', 'less_than', 'equals_or_greater_than', 'equals_or_less_than']`.\nAlso, `leftBound` and `rightBound` properties can be used instead of `condition` and `value` in order to filter by number range.\n\nFormat:\n```\n[{\n  action: 'show',\n  operationType: 'all',\n  entities: [\n    {\n       columnId: 'age[number]',\n       active: true,\n       leftBound: 1,\n       rightBound: 2\n    }\n  ]\n}]\n```",
          "privacy": "public",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 349,
              "column": 4
            },
            "end": {
              "line": 352,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filters"
            }
          ],
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "updateColumns",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 712,
              "column": 8
            },
            "end": {
              "line": 721,
=======
              "line": 730,
              "column": 8
            },
            "end": {
              "line": 739,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkRowDetailsTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 730,
              "column": 8
            },
            "end": {
              "line": 753,
=======
              "line": 748,
              "column": 8
            },
            "end": {
              "line": 771,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "nodes"
            }
          ]
        },
        {
          "name": "_ungroup",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 803,
              "column": 8
            },
            "end": {
              "line": 807,
=======
              "line": 819,
              "column": 8
            },
            "end": {
              "line": 823,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_resolveLastFrozenColumnIndex",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 809,
              "column": 8
            },
            "end": {
              "line": 821,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_columnSanityCheck",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 823,
              "column": 8
            },
            "end": {
              "line": 844,
=======
              "line": 825,
              "column": 8
            },
            "end": {
              "line": 837,
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_columnSanityCheck",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 839,
              "column": 8
            },
            "end": {
              "line": 860,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_handleColumnFroze",
          "description": "put frozen column to the beginning (in the place of the first data column)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 847,
              "column": 8
            },
            "end": {
              "line": 877,
=======
              "line": 863,
              "column": 8
            },
            "end": {
              "line": 893,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_handleColumnUnFreeze",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 895,
              "column": 8
            },
            "end": {
              "line": 902,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_doInstantSortAfterSelect",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 879,
              "column": 8
            },
            "end": {
              "line": 885,
=======
              "line": 904,
              "column": 8
            },
            "end": {
              "line": 910,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_selectedItemsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 887,
              "column": 8
            },
            "end": {
              "line": 891,
=======
              "line": 912,
              "column": 8
            },
            "end": {
              "line": 917,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectedItems"
            }
          ]
        },
        {
          "name": "_groupByColumnAllowed",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 893,
              "column": 8
            },
            "end": {
              "line": 895,
=======
              "line": 919,
              "column": 8
            },
            "end": {
              "line": 921,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasLocalDataProvider"
            },
            {
              "name": "expandableRows"
            }
          ]
        },
        {
          "name": "_handleSelectItem",
          "description": "Trick to prevent multiselection when in single select mode",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 900,
              "column": 8
            },
            "end": {
              "line": 907,
=======
              "line": 926,
              "column": 8
            },
            "end": {
              "line": 933,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_getValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 909,
              "column": 8
            },
            "end": {
              "line": 915,
=======
              "line": 935,
              "column": 8
            },
            "end": {
              "line": 941,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_getColumnWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 917,
              "column": 8
            },
            "end": {
              "line": 919,
=======
              "line": 943,
              "column": 8
            },
            "end": {
              "line": 945,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_getColumnFlexGrow",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 921,
              "column": 8
            },
            "end": {
              "line": 923,
=======
              "line": 947,
              "column": 8
            },
            "end": {
              "line": 949,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_resolveCellColor",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 925,
              "column": 8
            },
            "end": {
              "line": 965,
=======
              "line": 951,
              "column": 8
            },
            "end": {
              "line": 991,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_isRowConditionApplied",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 967,
              "column": 8
            },
            "end": {
              "line": 972,
=======
              "line": 993,
              "column": 8
            },
            "end": {
              "line": 998,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "condition"
            }
          ]
        },
        {
          "name": "_isColumnConditionApplied",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 974,
              "column": 8
            },
            "end": {
              "line": 981,
=======
              "line": 1000,
              "column": 8
            },
            "end": {
              "line": 1007,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "condition"
            }
          ]
        },
        {
          "name": "_tableDataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 983,
              "column": 8
            },
            "end": {
              "line": 998,
=======
              "line": 1009,
              "column": 8
            },
            "end": {
              "line": 1024,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "tableData"
            },
            {
              "name": "splices"
            },
            {
              "name": "isAttached"
            }
          ]
        },
        {
          "name": "_compareValues",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1000,
              "column": 8
            },
            "end": {
              "line": 1012,
=======
              "line": 1026,
              "column": 8
            },
            "end": {
              "line": 1038,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            },
            {
              "name": "path"
            },
            {
              "name": "direction"
            }
          ]
        },
        {
          "name": "_localDataResolver",
          "description": "Do not drop item for page sizing here, or it will break things",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1017,
              "column": 8
            },
            "end": {
              "line": 1053,
=======
              "line": 1043,
              "column": 8
            },
            "end": {
              "line": 1079,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "params"
            },
            {
              "name": "items"
            }
          ]
        },
        {
          "name": "_gridGetItemId",
          "description": "Overridden version of vaadin-grid getItemId, to allow grouping\nAlways use instance compare in case of hasChildren",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1085,
              "column": 8
            },
            "end": {
              "line": 1091,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_localDataProvider",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1055,
              "column": 8
            },
            "end": {
              "line": 1087,
=======
              "line": 1093,
              "column": 8
            },
            "end": {
              "line": 1128,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "params"
            },
            {
              "name": "callback"
            }
          ]
        },
        {
          "name": "_getAllLocalItems",
          "description": "Will return all local items after filter (no ordering applied)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1092,
              "column": 8
            },
            "end": {
              "line": 1102,
=======
              "line": 1133,
              "column": 8
            },
            "end": {
              "line": 1143,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_remoteDataProviderChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1104,
              "column": 8
            },
            "end": {
              "line": 1112,
=======
              "line": 1145,
              "column": 8
            },
            "end": {
              "line": 1153,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "provider"
            }
          ]
        },
        {
          "name": "_resolveColumnPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1114,
              "column": 8
            },
            "end": {
              "line": 1119,
=======
              "line": 1155,
              "column": 8
            },
            "end": {
              "line": 1160,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_populateTableColumns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1121,
              "column": 8
            },
            "end": {
              "line": 1138,
=======
              "line": 1162,
              "column": 8
            },
            "end": {
              "line": 1179,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "data"
            }
          ]
        },
        {
          "name": "_actionClicked",
          "description": "Event handler for action menu clicks",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1143,
              "column": 8
            },
            "end": {
              "line": 1167,
=======
              "line": 1184,
              "column": 8
            },
            "end": {
              "line": 1208,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "evt"
            }
          ]
        },
        {
          "name": "_getColumns",
          "description": "Function to resolve (data) columns on grid",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1172,
              "column": 8
            },
            "end": {
              "line": 1182,
=======
              "line": 1213,
              "column": 8
            },
            "end": {
              "line": 1223,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_updateActionMenu",
          "description": "Function called when action menu content needs to be updated",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1187,
              "column": 8
            },
            "end": {
              "line": 1240,
=======
              "line": 1228,
              "column": 8
            },
            "end": {
              "line": 1284,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_getColumnsWithName",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1242,
              "column": 8
            },
            "end": {
              "line": 1244,
=======
              "line": 1286,
              "column": 8
            },
            "end": {
              "line": 1288,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            }
          ]
        },
        {
          "name": "_getColumnById",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1246,
              "column": 8
            },
            "end": {
              "line": 1248,
=======
              "line": 1290,
              "column": 8
            },
            "end": {
              "line": 1292,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnId"
            }
          ]
        },
        {
          "name": "_scheduleColumnSanityCheck",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1250,
              "column": 8
            },
            "end": {
              "line": 1258,
=======
              "line": 1294,
              "column": 8
            },
            "end": {
              "line": 1302,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_onColumnUpdate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1260,
              "column": 8
            },
            "end": {
              "line": 1266,
=======
              "line": 1304,
              "column": 8
            },
            "end": {
              "line": 1310,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_loadingChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1268,
              "column": 8
            },
            "end": {
              "line": 1276,
=======
              "line": 1312,
              "column": 8
            },
            "end": {
              "line": 1320,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "loading"
            }
          ]
        },
        {
          "name": "_showActionBar",
          "description": "Simple method to check if action bar should be shown",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1281,
              "column": 8
            },
            "end": {
              "line": 1283,
=======
              "line": 1325,
              "column": 8
            },
            "end": {
              "line": 1327,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterField"
            },
            {
              "name": "hideActionMenu"
            },
            {
              "name": "filterable"
            }
          ]
        },
        {
          "name": "resolveColumnHeader",
          "description": "Helper method to check if header is defined, if not use name",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1288,
              "column": 8
            },
            "end": {
              "line": 1290,
=======
              "line": 1332,
              "column": 8
            },
            "end": {
              "line": 1334,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_applyAutoFilter",
          "description": "This to be moved to inner data-provider when we get that done. Until then\nthis will add workaround that allows to filter inmemory data given via\nitems parameter.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1297,
              "column": 8
            },
            "end": {
              "line": 1315,
=======
              "line": 1341,
              "column": 8
            },
            "end": {
              "line": 1359,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "filters"
            }
          ]
        },
        {
          "name": "_autoFilterChanged",
          "description": "Listener for auto filter component",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1320,
              "column": 8
            },
            "end": {
              "line": 1338,
=======
              "line": 1364,
              "column": 8
            },
            "end": {
              "line": 1382,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_isGroupedByColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1340,
              "column": 8
            },
            "end": {
              "line": 1342,
=======
              "line": 1384,
              "column": 8
            },
            "end": {
              "line": 1386,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "_groupByColumn"
            }
          ]
        },
        {
          "name": "_columnOrderCleaner",
          "description": "Method forcing column order rules. To be run after any column order change",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1347,
              "column": 8
            },
            "end": {
              "line": 1358,
=======
              "line": 1391,
              "column": 8
            },
            "end": {
              "line": 1402,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isSelectable",
          "description": "Check if selections are allowed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1363,
              "column": 8
            },
            "end": {
              "line": 1365,
=======
              "line": 1407,
              "column": 8
            },
            "end": {
              "line": 1409,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_isMultiSelect",
          "description": "Check if grid is in multi selection mode",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1370,
              "column": 8
            },
            "end": {
              "line": 1372,
=======
              "line": 1414,
              "column": 8
            },
            "end": {
              "line": 1416,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_selectionModeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1374,
              "column": 8
            },
            "end": {
              "line": 1401,
=======
              "line": 1418,
              "column": 8
            },
            "end": {
              "line": 1445,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "mode"
            }
          ]
        },
        {
          "name": "_highlightsObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1403,
              "column": 8
            },
            "end": {
              "line": 1405,
=======
              "line": 1447,
              "column": 8
            },
            "end": {
              "line": 1449,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "highlight"
            },
            {
              "name": "filterHighlights"
            }
          ]
        },
        {
          "name": "_gridHeightChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1407,
              "column": 8
            },
            "end": {
              "line": 1422,
=======
              "line": 1451,
              "column": 8
            },
            "end": {
              "line": 1466,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "gridHeight"
            }
          ]
        },
        {
          "name": "_onRowDetailsChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1424,
              "column": 8
            },
            "end": {
              "line": 1428,
=======
              "line": 1468,
              "column": 8
            },
            "end": {
              "line": 1472,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "rowDetails"
            }
          ]
        },
        {
          "name": "setRowDetailsVisible",
          "description": "Set visibility of the details container for any item's corresponding row.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1433,
              "column": 8
            },
            "end": {
              "line": 1445,
=======
              "line": 1477,
              "column": 8
            },
            "end": {
              "line": 1489,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "isVisible"
            }
          ]
        },
        {
          "name": "_editingItemObserver",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1447,
              "column": 8
            },
            "end": {
              "line": 1459,
=======
              "line": 1491,
              "column": 8
            },
            "end": {
              "line": 1503,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "editingItem"
            },
            {
              "name": "oldV"
            }
          ]
        },
        {
          "name": "_setEditingItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1461,
              "column": 8
            },
            "end": {
              "line": 1465,
=======
              "line": 1505,
              "column": 8
            },
            "end": {
              "line": 1512,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_cancelEdit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1467,
              "column": 8
            },
            "end": {
              "line": 1470,
=======
              "line": 1514,
              "column": 8
            },
            "end": {
              "line": 1519,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ]
        },
        {
          "name": "_isItemEditing",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1472,
              "column": 8
            },
            "end": {
              "line": 1474,
=======
              "line": 1521,
              "column": 8
            },
            "end": {
              "line": 1523,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "editingItem"
            }
          ]
        },
        {
          "name": "_isAnyItemEditing",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1476,
              "column": 8
            },
            "end": {
              "line": 1478,
=======
              "line": 1525,
              "column": 8
            },
            "end": {
              "line": 1527,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "editingItem"
            }
          ]
        },
        {
          "name": "_saveItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1480,
              "column": 8
            },
            "end": {
              "line": 1501,
=======
              "line": 1529,
              "column": 8
            },
            "end": {
              "line": 1552,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_localizeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1503,
              "column": 8
            },
            "end": {
              "line": 1505,
=======
              "line": 1554,
              "column": 8
            },
            "end": {
              "line": 1556,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localize"
            }
          ]
        },
        {
          "name": "_scrollListener",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1507,
              "column": 8
            },
            "end": {
              "line": 1513,
=======
              "line": 1558,
              "column": 8
            },
            "end": {
              "line": 1564,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_onPxSorterChanged",
          "description": "Overridden version of _onSorterChanged in vaadin-grid-sort-mixin. Is mapped to custom event\npx-sorter-changed emitted by px-data-grid-sorter. Only difference is to use push, not\nunshift, when adding sort rule to _sorters. If errors in this method, update to match with\ncurrent version in vaadin-grid-sort-mixin, and replace unshift with push.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1521,
              "column": 8
            },
            "end": {
              "line": 1558,
=======
              "line": 1572,
              "column": 8
            },
            "end": {
              "line": 1609,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_getOrderedColumns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1560,
              "column": 8
            },
            "end": {
              "line": 1566,
=======
              "line": 1611,
              "column": 8
            },
            "end": {
              "line": 1617,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getVisibleColumns",
          "description": "Get current visible columns in grid",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1571,
              "column": 8
            },
            "end": {
              "line": 1578,
=======
              "line": 1622,
              "column": 8
            },
            "end": {
              "line": 1634,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getData",
          "description": "Returns currently visible data if `true` parameter is passed or all cached data if no parameter is passed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1583,
              "column": 8
            },
            "end": {
              "line": 1618,
=======
              "line": 1639,
              "column": 8
            },
            "end": {
              "line": 1674,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "visibleOnly"
            }
          ]
        },
        {
          "name": "_cleanColumns",
          "description": "Make JSON friendly version out of columns array",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1623,
              "column": 8
            },
            "end": {
              "line": 1628,
=======
              "line": 1679,
              "column": 8
            },
            "end": {
              "line": 1684,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columns"
            }
          ]
        },
        {
          "name": "_columnsChanged",
          "description": "Columns property change observer",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1633,
              "column": 8
            },
            "end": {
              "line": 1636,
=======
              "line": 1689,
              "column": 8
            },
            "end": {
              "line": 1692,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columns"
            }
          ]
        },
        {
          "name": "_setColumnId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1638,
              "column": 8
            },
            "end": {
              "line": 1655,
=======
              "line": 1694,
              "column": 8
            },
            "end": {
              "line": 1711,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columns"
            }
          ]
        },
        {
          "name": "restoreLayout",
          "description": "Restore layout (columns) to state those were given",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1660,
              "column": 8
            },
            "end": {
              "line": 1668,
=======
              "line": 1716,
              "column": 8
            },
            "end": {
              "line": 1724,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_revertColumns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1670,
              "column": 8
            },
            "end": {
              "line": 1676,
=======
              "line": 1726,
              "column": 8
            },
            "end": {
              "line": 1732,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "revertTo"
            }
          ]
        },
        {
          "name": "_undefinedToFalse",
          "description": "Just to make sure only true or false is given (undefined converted to false).\nIn some cases undefined value breaks functionality,",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1682,
              "column": 8
            },
            "end": {
              "line": 1688,
=======
              "line": 1738,
              "column": 8
            },
            "end": {
              "line": 1744,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_copyArray",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1690,
              "column": 8
            },
            "end": {
              "line": 1692,
=======
              "line": 1746,
              "column": 8
            },
            "end": {
              "line": 1748,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr"
            }
          ]
        },
        {
          "name": "_isAutoHeight",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1694,
              "column": 8
            },
            "end": {
              "line": 1696,
=======
              "line": 1750,
              "column": 8
            },
            "end": {
              "line": 1752,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "gridHeight"
            }
          ]
        },
        {
          "name": "_checkColumnResizable",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1698,
              "column": 8
            },
            "end": {
              "line": 1700,
=======
              "line": 1754,
              "column": 8
            },
            "end": {
              "line": 1756,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "gridResizable"
            },
            {
              "name": "columnResizable"
            }
          ]
        },
        {
          "name": "_isStriped",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1702,
              "column": 8
            },
            "end": {
              "line": 1704,
=======
              "line": 1758,
              "column": 8
            },
            "end": {
              "line": 1760,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "striped"
            },
            {
              "name": "groupByColumn"
            }
          ]
        },
        {
          "name": "_ellipsisModeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1762,
              "column": 8
            },
            "end": {
              "line": 1771,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ellipsisMode"
            }
          ]
        },
        {
          "name": "_compare",
          "description": "Rewrite of _compare from vaadin-grid to allow incasesensitive compare",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1709,
              "column": 8
            },
            "end": {
              "line": 1728,
=======
              "line": 1776,
              "column": 8
            },
            "end": {
              "line": 1795,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_offerActionColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1730,
              "column": 8
            },
            "end": {
              "line": 1732,
=======
              "line": 1797,
              "column": 8
            },
            "end": {
              "line": 1799,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "editable"
            },
            {
              "name": "itemActions"
            }
          ]
        },
        {
          "name": "_isColumnReorderingAllowed",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1801,
              "column": 8
            },
            "end": {
              "line": 1803,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnReordingAllowed"
            },
            {
              "name": "groupByColumn"
            }
          ]
        },
        {
          "name": "getState",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1734,
              "column": 8
            },
            "end": {
              "line": 1741,
=======
              "line": 1805,
              "column": 8
            },
            "end": {
              "line": 1812,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "setState",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 1743,
              "column": 8
            },
            "end": {
              "line": 1753,
=======
              "line": 1814,
              "column": 8
            },
            "end": {
              "line": 1824,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "state"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 180,
          "column": 6
        },
        "end": {
<<<<<<< HEAD
          "line": 1754,
=======
          "line": 1825,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
          "column": 7
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "DataGridElement",
      "attributes": [
        {
          "name": "filterable",
          "description": "If true, turns on advanced filtering.",
          "sourceRange": {
            "file": "px-data-grid-filterable-mixin.html",
            "start": {
              "line": 13,
              "column": 8
            },
            "end": {
              "line": 16,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "Predix.DataGridFilterableMixin"
        },
        {
          "name": "table-data",
          "description": "Data for the table to display.\n\nExpected data format is a JSON array of objects. Each object in the array represents a row in the table.\n\nEach item in an object will be displayed as a separate column, unless px-data-table-columns are\ndefined to limit which columns are displayed.",
          "sourceRange": {
            "start": {
              "line": 199,
              "column": 12
            },
            "end": {
              "line": 202,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "hide-selection-column",
          "description": "If true, hides the column with checkboxes.",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 12
            },
            "end": {
              "line": 210,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "selected-items",
          "description": "An array that contains the selected items.",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 12
            },
            "end": {
              "line": 219,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "size",
          "description": "The total number of items",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 12
            },
            "end": {
              "line": 227,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "page-size",
          "description": "Number of items fetched at a time from the dataprovider.",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 12
            },
            "end": {
              "line": 235,
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "multi-sort",
          "description": "When `true`, user can sort by multiple columns",
          "sourceRange": {
            "start": {
              "line": 240,
              "column": 12
            },
            "end": {
              "line": 243,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "selection-mode",
          "description": "Current selection mode of grid. Accepts values 'none', 'single' and 'multi'.",
          "sourceRange": {
            "start": {
              "line": 248,
              "column": 12
            },
            "end": {
              "line": 252,
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "active-item",
          "description": "The item user has last interacted with. Turns to `null` after user deactivates\nthe item by re-interacting with the currently active item.",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 12
            },
            "end": {
              "line": 262,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "resizable",
          "description": "When `true`, user can resize columns",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 12
            },
            "end": {
              "line": 270,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "editable",
          "description": "When `true`, user can edit data",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 12
            },
            "end": {
              "line": 278,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "column-reordering-allowed",
          "description": "Set to true to allow column reordering. Notice that some states will disable\nreordering (eg. grouped by value).",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 12
            },
            "end": {
              "line": 286,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "expanded-items",
          "description": "An array containing references to expanded items.",
          "sourceRange": {
            "start": {
              "line": 291,
              "column": 12
            },
            "end": {
              "line": 294,
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "row-details",
          "description": "Set to true to enable a togglable row details container. This container\nis hidden by default, but can be opened by clicking the chevron icon to left\nof the row.",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 12
            },
            "end": {
              "line": 305,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "hide-action-menu",
          "description": "Define if table action menu should be hidden.",
          "sourceRange": {
            "start": {
              "line": 310,
              "column": 12
            },
            "end": {
              "line": 313,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "columns",
          "description": "Sets the columns the grid should render. If no columns are passed, the grid\ngenerates columns from the `tableData` passed in. Columns are rendered\nin the same order as the array.\n\nEach column can have the following configurations. Only name and path\nare required, all others are optional:\n\n  * `{string} id='column.path[column.type]'` - Unique identificator of the column.\n    By default, px-data-grid will automatically generate it from `column.path` and `column.type`.\n    There can't be 2 columns with the same id.\n    Also, note, that `-any-` is reserved keyword for `id`, you should not use it.\n\n  * `{string} name` - Name, that is displayed in column header.\n\n  * `{string} path` - Column's path indicates a key, which is used to get data from data object.\n\n  * `{string} type=('string'|'number'|'date')` - Type of column.\n    Influences on advanced filter's UI. Different selectors will be displayed for different types.\n\n  * `{string} renderer` - You can define your own renderer element to display and edit cell data in your own way.\n    For more information, please check sample renderers, e.g. `px-data-grid-number-renderer`, `px-data-grid-date-renderer`.\n\n  * `{object} rendererConfig` - An arbitrary object that can be used to pass down options to the chosen renderer.\n     See `px-data-grid-date-renderer` for an example of a renderer using this object for its four configurable properties\n  * `{number} minBound` - Used to define minimum bound of a number in advanced filter's slider.\n    Note, that this property works with `column.type === 'number'` only.\n\n  * `{number} maxBound` - Used to define maximum bound of a number in advanced filter's slider.\n    Note, that this property works with `column.type === 'number'` only.\n    If both minBound and maxBound properties are defined, advanced filter will display slider instead of dropdown.\n\n  * `{boolean} hidden=false` - Indicates whether a column is hidden.\n\n  * `{boolean} frozen=false` - Indicates whether a column is frozen.\n\n  * `{boolean} required=false` - This property is used in renderers to validate data when user edits it.\n\n  * `{number} flexGrow=1` - Indicates whether a column should grow, equialent to the CSS flex-grow property.\n\nExample format for a single column with all configurations used:\n\n```javascript\n{\n  id: 'first[string]',\n  name: 'First Name',\n  path: 'first',\n  type: 'string',\n  renderer: 'px-data-grid-string-renderer',\n  rendererConfig: {\n    customInfo: 'some info',\n    customInfo2: 42\n  },\n  minBound: 1,\n  maxBound: 10,\n  hidden: false,\n  frozen: false,\n  required: false,\n  flexGrow: 1\n}\n```",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 377,
              "column": 12
            },
            "end": {
              "line": 381,
=======
              "line": 371,
              "column": 12
            },
            "end": {
              "line": 375,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "language",
          "description": "A valid IETF language tag as a string that `app-localize-behavior` will\nuse to localize this component.\n\nSee https://github.com/PolymerElements/app-localize-behavior for API\ndocumentation and more information.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 405,
              "column": 12
            },
            "end": {
              "line": 408,
=======
              "line": 399,
              "column": 12
            },
            "end": {
              "line": 402,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "use-key-if-missing",
          "description": "Use the key for localization if value for that language is missing.\nShould always be true for Predix components.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 414,
              "column": 12
            },
            "end": {
              "line": 417,
=======
              "line": 408,
              "column": 12
            },
            "end": {
              "line": 411,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "resources",
          "description": "Library object of hardcoded strings used in this application.\nUsed by `app-localize-behavior` in conjunction with `language`.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 423,
              "column": 12
            },
            "end": {
              "line": 447,
=======
              "line": 417,
              "column": 12
            },
            "end": {
              "line": 441,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "Object"
        },
        {
          "name": "table-actions",
          "description": "All custom table actions shown before columns. Array should contain objects\nwith name (String, shown to user) and id (String, given back in event).\nWhen user selects these actions table-action event will be emitted, with id of\naction at event.detail.id\n```\n[\n  {\n    name: 'Export CSV',\n    id: 'CSV'\n  }\n  {\n    name: 'Export Excel',\n    id: 'Excel'\n  }\n]\n```",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 467,
              "column": 12
            },
            "end": {
              "line": 470,
=======
              "line": 461,
              "column": 12
            },
            "end": {
              "line": 464,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "item-actions",
          "description": "All custom item actions shown on the data rows. Array should contain objects\nwith name (String, shown to user) and id (String, given back in event).\nWhen user selects these actions item-action event will be emitted, with id of\naction at event.detail.id\n```\n[\n  {\n    name: 'Add Row',\n    id: 'add'\n  }\n  {\n    name: 'Delete Row',\n    id: 'delete'\n  }\n]\n```",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 490,
              "column": 12
            },
            "end": {
              "line": 493,
=======
              "line": 484,
              "column": 12
            },
            "end": {
              "line": 487,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "remote-data-provider",
          "description": "Function that provides items lazily. Receives arguments params, callback",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 498,
              "column": 12
            },
            "end": {
              "line": 501,
=======
              "line": 492,
              "column": 12
            },
            "end": {
              "line": 495,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "striped",
          "description": "If true, every other row in the table will appear with a background color to improve visual scanning.\nWhen grouped by column striping will be disabled.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 519,
              "column": 12
            },
            "end": {
              "line": 522,
=======
              "line": 513,
              "column": 12
            },
            "end": {
              "line": 516,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "ellipsis",
          "description": "If true sets all columns to use ellipsis when text overflows the column,\nenabling wrap mode while ellisis mode is enabled is an undefined state.",
          "sourceRange": {
            "start": {
              "line": 522,
              "column": 12
            },
            "end": {
              "line": 526,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "loading-spinner-debounce",
          "description": "How many milliseconds before loading spinner will be shown",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 541,
              "column": 12
            },
            "end": {
              "line": 544,
=======
              "line": 545,
              "column": 12
            },
            "end": {
              "line": 548,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "auto-filter",
          "description": "To enable automatic filtering change property to true",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 549,
              "column": 12
            },
            "end": {
              "line": 552,
=======
              "line": 553,
              "column": 12
            },
            "end": {
              "line": 556,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "highlight",
          "description": "Array of objects of conditions used to highlight specific columns.\nFormat:\n```javascript\n{\n  type: 'cell',\n  condition: (cellContent, column, item) => { return cellContent == 'John Doe' },\n},\n{\n  type: 'row',\n  condition: (cellContent, item) => { return cellContent[0] == 'a' },\n  color: '#a8a8a8'\n},\n{\n  type: 'column',\n  condition (column, item) => { return column.name == 'age' },\n  color: 'pink'\n}\n```",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 574,
              "column": 12
            },
            "end": {
              "line": 577,
=======
              "line": 578,
              "column": 12
            },
            "end": {
              "line": 581,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "Array"
        },
        {
          "name": "default-column-width",
          "description": "Default column width if not defined, eg. '100px'. Notice that with not\nzero flex values this value behaves more as minimum width. See\ndefaultColumnFlexGrow property.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 598,
              "column": 12
            },
            "end": {
              "line": 601,
=======
              "line": 604,
              "column": 12
            },
            "end": {
              "line": 607,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "default-column-flex-grow",
          "description": "Default column flex if not defined, eg. 1. Equialent to the CSS flex-grow\nproperty.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 606,
              "column": 12
            },
            "end": {
              "line": 609,
=======
              "line": 613,
              "column": 12
            },
            "end": {
              "line": 616,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "grid-height",
          "description": "Define height of grid. If 'auto' the height of grid will match with\nmatch with number of rows in grid. Undefined value and 'default'\nwill use default height. Any other value (eg. '400px') is given as\nCSS height value to the actual grid component inside px-data-grid.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 627,
              "column": 12
            },
            "end": {
              "line": 631,
=======
              "line": 634,
              "column": 12
            },
            "end": {
              "line": 638,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "flex-to-size",
          "description": "Sets the px-grid to a mode where it and its content will flex to size.\nBy default the  px-data-grid will take 100% of the available height, this\ncan be changed by defining the css variable: --px-data-grid-height",
          "sourceRange": {
            "start": {
              "line": 645,
              "column": 12
            },
            "end": {
              "line": 649,
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "item-id-path",
          "description": "Path to an item sub-property that identifies the item. This should be\ndefined in case of any editing, to allow grid to pair new version of\nitem with new. Path must point to unique identifier in data objects\nthat does not change (eg. 'id')",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 639,
              "column": 12
            },
            "end": {
              "line": 641,
=======
              "line": 657,
              "column": 12
            },
            "end": {
              "line": 659,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "offer-filter-saving",
          "description": "If filter saving options should offered to end user. If save is\nselected it will emit save-filters event.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 647,
              "column": 12
            },
            "end": {
              "line": 650,
=======
              "line": 665,
              "column": 12
            },
            "end": {
              "line": 668,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "allow-sort-by-selection",
          "description": "If user is allowed to sort by selection",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 655,
              "column": 12
            },
            "end": {
              "line": 658,
=======
              "line": 673,
              "column": 12
            },
            "end": {
              "line": 676,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "instant-sort-when-selection",
          "description": "If enabled in multi selection and sort by selection mode any\nchanges to selection will cause instant re-sort.",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 664,
              "column": 12
            },
            "end": {
              "line": 667,
=======
              "line": 682,
              "column": 12
            },
            "end": {
              "line": 685,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "compact-advanced-filter-dialog",
          "description": "If true advanced filter dialog will be rendered in space saving\nmode (eg. reuseable headers).",
          "sourceRange": {
            "start": {
<<<<<<< HEAD
              "line": 672,
              "column": 12
            },
            "end": {
              "line": 675,
=======
              "line": 690,
              "column": 12
            },
            "end": {
              "line": 693,
>>>>>>> 9b629f8213348d3a6b96932db8a0cdc34080c6c6
              "column": 13
            }
          },
          "metadata": {},
          "type": "boolean"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "table-data-changed",
          "description": "Fired when the `tableData` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-items-changed",
          "description": "Fired when the `selectedItems` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "active-item-changed",
          "description": "Fired when the `activeItem` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "px-data-grid",
      "mixins": [
        "Predix.DataGridFilterableMixin"
      ]
    }
  ]
}
